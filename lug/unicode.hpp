// lug - Embedded DSL for PE grammar parser combinators in C++
// Copyright (c) 2017-2024 Jesse W. Towner
// See LICENSE.md file for license details

// This header file is generated by the makeunicode tool program.
// Do not modify this file by hand. Instead, modify and run the
// tool to regenerate this file.

#ifndef LUG_INCLUDE_LUG_UNICODE_HPP
#define LUG_INCLUDE_LUG_UNICODE_HPP

#include <lug/detail.hpp>

#include <cctype>
#include <cstddef>
#include <cstdint>

#include <array>
#include <memory>
#include <optional>
#include <utility>
#include <vector>

namespace lug::unicode {

// POSIX compatibility properties
enum class ctype : std::uint_least16_t
{
	none     = 0,
	alpha    = UINT16_C(1) <<  0,
	lower    = UINT16_C(1) <<  1,
	upper    = UINT16_C(1) <<  2,
	punct    = UINT16_C(1) <<  3,
	digit    = UINT16_C(1) <<  4,
	xdigit   = UINT16_C(1) <<  5,
	alnum    = UINT16_C(1) <<  6,
	space    = UINT16_C(1) <<  7,
	blank    = UINT16_C(1) <<  8,
	cntrl    = UINT16_C(1) <<  9,
	graph    = UINT16_C(1) << 10,
	print    = UINT16_C(1) << 11,
	word     = UINT16_C(1) << 12,
	is_bitfield_enum
};

// Binary properties
enum class ptype : std::uint_least64_t
{
	None                                 = 0,
	Any                                  = UINT64_C(1) <<  0,
	Ascii                                = UINT64_C(1) <<  1,
	Assigned                             = UINT64_C(1) <<  2,
	Line_Ending                          = UINT64_C(1) <<  3,
	White_Space                          = UINT64_C(1) <<  4,
	Bidi_Control                         = UINT64_C(1) <<  5,
	Join_Control                         = UINT64_C(1) <<  6,
	Dash                                 = UINT64_C(1) <<  7,
	Quotation_Mark                       = UINT64_C(1) <<  8,
	Terminal_Punctuation                 = UINT64_C(1) <<  9,
	Other_Math                           = UINT64_C(1) << 10,
	Hex_Digit                            = UINT64_C(1) << 11,
	ASCII_Hex_Digit                      = UINT64_C(1) << 12,
	Other_Alphabetic                     = UINT64_C(1) << 13,
	Ideographic                          = UINT64_C(1) << 14,
	Diacritic                            = UINT64_C(1) << 15,
	Extender                             = UINT64_C(1) << 16,
	Other_Lowercase                      = UINT64_C(1) << 17,
	Other_Uppercase                      = UINT64_C(1) << 18,
	Noncharacter_Code_Point              = UINT64_C(1) << 19,
	Other_Grapheme_Extend                = UINT64_C(1) << 20,
	IDS_Binary_Operator                  = UINT64_C(1) << 21,
	IDS_Trinary_Operator                 = UINT64_C(1) << 22,
	IDS_Unary_Operator                   = UINT64_C(1) << 23,
	Radical                              = UINT64_C(1) << 24,
	Unified_Ideograph                    = UINT64_C(1) << 25,
	Other_Default_Ignorable_Code_Point   = UINT64_C(1) << 26,
	Deprecated                           = UINT64_C(1) << 27,
	Soft_Dotted                          = UINT64_C(1) << 28,
	Logical_Order_Exception              = UINT64_C(1) << 29,
	Other_ID_Start                       = UINT64_C(1) << 30,
	Other_ID_Continue                    = UINT64_C(1) << 31,
	ID_Compat_Math_Continue              = UINT64_C(1) << 32,
	ID_Compat_Math_Start                 = UINT64_C(1) << 33,
	Sentence_Terminal                    = UINT64_C(1) << 34,
	Variation_Selector                   = UINT64_C(1) << 35,
	Pattern_White_Space                  = UINT64_C(1) << 36,
	Pattern_Syntax                       = UINT64_C(1) << 37,
	Prepended_Concatenation_Mark         = UINT64_C(1) << 38,
	Regional_Indicator                   = UINT64_C(1) << 39,
	Lowercase                            = UINT64_C(1) << 40,
	Uppercase                            = UINT64_C(1) << 41,
	Cased                                = UINT64_C(1) << 42,
	Case_Ignorable                       = UINT64_C(1) << 43,
	Changes_When_Lowercased              = UINT64_C(1) << 44,
	Changes_When_Uppercased              = UINT64_C(1) << 45,
	Changes_When_Titlecased              = UINT64_C(1) << 46,
	Changes_When_Casefolded              = UINT64_C(1) << 47,
	Changes_When_Casemapped              = UINT64_C(1) << 48,
	Alphabetic                           = UINT64_C(1) << 49,
	Default_Ignorable_Code_Point         = UINT64_C(1) << 50,
	Grapheme_Base                        = UINT64_C(1) << 51,
	Grapheme_Extend                      = UINT64_C(1) << 52,
	Math                                 = UINT64_C(1) << 53,
	ID_Start                             = UINT64_C(1) << 54,
	ID_Continue                          = UINT64_C(1) << 55,
	XID_Start                            = UINT64_C(1) << 56,
	XID_Continue                         = UINT64_C(1) << 57,
	Grapheme_Link                        = UINT64_C(1) << 58,
	InCB_Linker                          = UINT64_C(1) << 59,
	InCB_Consonant                       = UINT64_C(1) << 60,
	InCB_Extend                          = UINT64_C(1) << 61,
	is_bitfield_enum
};

// General categories
enum class gctype : std::uint_least32_t
{
	None = 0,
	Ll = UINT32_C(1) <<  0,    Lowercase_Letter = Ll,
	Lm = UINT32_C(1) <<  1,    Modifier_Letter = Lm,
	Lo = UINT32_C(1) <<  2,    Other_Letter = Lo,
	Lt = UINT32_C(1) <<  3,    Titlecase_Letter = Lt,
	Lu = UINT32_C(1) <<  4,    Uppercase_Letter = Lu,
	Mc = UINT32_C(1) <<  5,    Spacing_Mark = Mc,
	Me = UINT32_C(1) <<  6,    Enclosing_Mark = Me,
	Mn = UINT32_C(1) <<  7,    Nonspacing_Mark = Mn,
	Nd = UINT32_C(1) <<  8,    Decimal_Number = Nd,
	Nl = UINT32_C(1) <<  9,    Letter_Number = Nl,
	No = UINT32_C(1) << 10,    Other_Number = No,
	Pc = UINT32_C(1) << 11,    Connector_Punctuation = Pc,
	Pd = UINT32_C(1) << 12,    Dash_Punctuation = Pd,
	Pe = UINT32_C(1) << 13,    Close_Punctuation = Pe,
	Pf = UINT32_C(1) << 14,    Final_Punctuation = Pf,
	Pi = UINT32_C(1) << 15,    Initial_Punctuation = Pi,
	Po = UINT32_C(1) << 16,    Other_Punctuation = Po,
	Ps = UINT32_C(1) << 17,    Open_Punctuation = Ps,
	Sc = UINT32_C(1) << 18,    Currency_Symbol = Sc,
	Sk = UINT32_C(1) << 19,    Modifier_Symbol = Sk,
	Sm = UINT32_C(1) << 20,    Mathematical_Symbol = Sm,
	So = UINT32_C(1) << 21,    Other_Symbol = So,
	Zl = UINT32_C(1) << 22,    Line_Separator = Zl,
	Zp = UINT32_C(1) << 23,    Paragraph_Separator = Zp,
	Zs = UINT32_C(1) << 24,    Space_Separator = Zs,
	Cc = UINT32_C(1) << 25,    Control = Cc,
	Cf = UINT32_C(1) << 26,    Format = Cf,
	Cn = UINT32_C(1) << 27,    Unassigned = Cn,
	Co = UINT32_C(1) << 28,    Private_Use = Co,
	Cs = UINT32_C(1) << 29,    Surrogate = Cs,
	C  = Cc|Cf|Cn|Co|Cs,       Other = C,
	L  = Lu|Ll|Lt|Lm|Lo,       Letter = L,
	LC = Lu|Ll|Lt,             Cased_Letter = LC,
	M  = Mc|Me|Mn,             Mark = M,
	N  = Nd|Nl|No,             Number = N,
	P  = Pc|Pd|Pe|Pf|Pi|Po|Ps, Punctuation = P,
	S  = Sc|Sm|Sk|So,          Symbol = S,
	Z  = Zl|Zp|Zs,             Separator = Z,
	is_bitfield_enum
};

// Scripts
enum class sctype : std::uint_least8_t
{
	Unknown                  =   0,
	Common                   =   1,
	Inherited                =   2,
	Arabic                   =   3,
	Armenian                 =   4,
	Bengali                  =   5,
	Bopomofo                 =   6,
	Braille                  =   7,
	Buginese                 =   8,
	Buhid                    =   9,
	Canadian_Aboriginal      =  10,
	Cherokee                 =  11,
	Coptic                   =  12,
	Cypriot                  =  13,
	Cyrillic                 =  14,
	Deseret                  =  15,
	Devanagari               =  16,
	Ethiopic                 =  17,
	Georgian                 =  18,
	Glagolitic               =  19,
	Gothic                   =  20,
	Greek                    =  21,
	Gujarati                 =  22,
	Gurmukhi                 =  23,
	Han                      =  24,
	Hangul                   =  25,
	Hanunoo                  =  26,
	Hebrew                   =  27,
	Hiragana                 =  28,
	Kannada                  =  29,
	Katakana                 =  30,
	Kharoshthi               =  31,
	Khmer                    =  32,
	Lao                      =  33,
	Latin                    =  34,
	Limbu                    =  35,
	Linear_B                 =  36,
	Malayalam                =  37,
	Mongolian                =  38,
	Myanmar                  =  39,
	New_Tai_Lue              =  40,
	Ogham                    =  41,
	Old_Italic               =  42,
	Old_Persian              =  43,
	Oriya                    =  44,
	Osmanya                  =  45,
	Runic                    =  46,
	Shavian                  =  47,
	Sinhala                  =  48,
	Syloti_Nagri             =  49,
	Syriac                   =  50,
	Tagalog                  =  51,
	Tagbanwa                 =  52,
	Tai_Le                   =  53,
	Tamil                    =  54,
	Telugu                   =  55,
	Thaana                   =  56,
	Thai                     =  57,
	Tibetan                  =  58,
	Tifinagh                 =  59,
	Ugaritic                 =  60,
	Yi                       =  61,
	Balinese                 =  62,
	Cuneiform                =  63,
	Nko                      =  64,
	Phags_Pa                 =  65,
	Phoenician               =  66,
	Carian                   =  67,
	Cham                     =  68,
	Kayah_Li                 =  69,
	Lepcha                   =  70,
	Lycian                   =  71,
	Lydian                   =  72,
	Ol_Chiki                 =  73,
	Rejang                   =  74,
	Saurashtra               =  75,
	Sundanese                =  76,
	Vai                      =  77,
	Avestan                  =  78,
	Bamum                    =  79,
	Egyptian_Hieroglyphs     =  80,
	Imperial_Aramaic         =  81,
	Inscriptional_Pahlavi    =  82,
	Inscriptional_Parthian   =  83,
	Javanese                 =  84,
	Kaithi                   =  85,
	Lisu                     =  86,
	Meetei_Mayek             =  87,
	Old_South_Arabian        =  88,
	Old_Turkic               =  89,
	Samaritan                =  90,
	Tai_Tham                 =  91,
	Tai_Viet                 =  92,
	Batak                    =  93,
	Brahmi                   =  94,
	Mandaic                  =  95,
	Chakma                   =  96,
	Meroitic_Cursive         =  97,
	Meroitic_Hieroglyphs     =  98,
	Miao                     =  99,
	Sharada                  = 100,
	Sora_Sompeng             = 101,
	Takri                    = 102,
	Bassa_Vah                = 103,
	Caucasian_Albanian       = 104,
	Duployan                 = 105,
	Elbasan                  = 106,
	Grantha                  = 107,
	Khojki                   = 108,
	Khudawadi                = 109,
	Linear_A                 = 110,
	Mahajani                 = 111,
	Manichaean               = 112,
	Mende_Kikakui            = 113,
	Modi                     = 114,
	Mro                      = 115,
	Nabataean                = 116,
	Old_North_Arabian        = 117,
	Old_Permic               = 118,
	Pahawh_Hmong             = 119,
	Palmyrene                = 120,
	Psalter_Pahlavi          = 121,
	Pau_Cin_Hau              = 122,
	Siddham                  = 123,
	Tirhuta                  = 124,
	Warang_Citi              = 125,
	Ahom                     = 126,
	Anatolian_Hieroglyphs    = 127,
	Hatran                   = 128,
	Multani                  = 129,
	Old_Hungarian            = 130,
	SignWriting              = 131,
	Adlam                    = 132,
	Bhaiksuki                = 133,
	Marchen                  = 134,
	Newa                     = 135,
	Osage                    = 136,
	Tangut                   = 137,
	Masaram_Gondi            = 138,
	Nushu                    = 139,
	Soyombo                  = 140,
	Zanabazar_Square         = 141,
	Dogra                    = 142,
	Gunjala_Gondi            = 143,
	Makasar                  = 144,
	Medefaidrin              = 145,
	Hanifi_Rohingya          = 146,
	Sogdian                  = 147,
	Old_Sogdian              = 148,
	Elymaic                  = 149,
	Nandinagari              = 150,
	Nyiakeng_Puachue_Hmong   = 151,
	Wancho                   = 152,
	Chorasmian               = 153,
	Dives_Akuru              = 154,
	Khitan_Small_Script      = 155,
	Yezidi                   = 156,
	Cypro_Minoan             = 157,
	Old_Uyghur               = 158,
	Tangsa                   = 159,
	Toto                     = 160,
	Vithkuqi                 = 161,
	Kawi                     = 162,
	Nag_Mundari              = 163
};

// Blocks
enum class blktype : std::uint_least16_t
{
	No_block                                         =   0,
	Basic_Latin                                      =   1,
	Latin_1_Supplement                               =   2,
	Latin_Extended_A                                 =   3,
	Latin_Extended_B                                 =   4,
	IPA_Extensions                                   =   5,
	Spacing_Modifier_Letters                         =   6,
	Combining_Diacritical_Marks                      =   7,
	Greek_and_Coptic                                 =   8,
	Cyrillic                                         =   9,
	Cyrillic_Supplement                              =  10,
	Armenian                                         =  11,
	Hebrew                                           =  12,
	Arabic                                           =  13,
	Syriac                                           =  14,
	Arabic_Supplement                                =  15,
	Thaana                                           =  16,
	NKo                                              =  17,
	Samaritan                                        =  18,
	Mandaic                                          =  19,
	Syriac_Supplement                                =  20,
	Arabic_Extended_A                                =  21,
	Devanagari                                       =  22,
	Bengali                                          =  23,
	Gurmukhi                                         =  24,
	Gujarati                                         =  25,
	Oriya                                            =  26,
	Tamil                                            =  27,
	Telugu                                           =  28,
	Kannada                                          =  29,
	Malayalam                                        =  30,
	Sinhala                                          =  31,
	Thai                                             =  32,
	Lao                                              =  33,
	Tibetan                                          =  34,
	Myanmar                                          =  35,
	Georgian                                         =  36,
	Hangul_Jamo                                      =  37,
	Ethiopic                                         =  38,
	Ethiopic_Supplement                              =  39,
	Cherokee                                         =  40,
	Unified_Canadian_Aboriginal_Syllabics            =  41,
	Ogham                                            =  42,
	Runic                                            =  43,
	Tagalog                                          =  44,
	Hanunoo                                          =  45,
	Buhid                                            =  46,
	Tagbanwa                                         =  47,
	Khmer                                            =  48,
	Mongolian                                        =  49,
	Unified_Canadian_Aboriginal_Syllabics_Extended   =  50,
	Limbu                                            =  51,
	Tai_Le                                           =  52,
	New_Tai_Lue                                      =  53,
	Khmer_Symbols                                    =  54,
	Buginese                                         =  55,
	Tai_Tham                                         =  56,
	Combining_Diacritical_Marks_Extended             =  57,
	Balinese                                         =  58,
	Sundanese                                        =  59,
	Batak                                            =  60,
	Lepcha                                           =  61,
	Ol_Chiki                                         =  62,
	Cyrillic_Extended_C                              =  63,
	Sundanese_Supplement                             =  64,
	Vedic_Extensions                                 =  65,
	Phonetic_Extensions                              =  66,
	Phonetic_Extensions_Supplement                   =  67,
	Combining_Diacritical_Marks_Supplement           =  68,
	Latin_Extended_Additional                        =  69,
	Greek_Extended                                   =  70,
	General_Punctuation                              =  71,
	Superscripts_and_Subscripts                      =  72,
	Currency_Symbols                                 =  73,
	Combining_Diacritical_Marks_for_Symbols          =  74,
	Letterlike_Symbols                               =  75,
	Number_Forms                                     =  76,
	Arrows                                           =  77,
	Mathematical_Operators                           =  78,
	Miscellaneous_Technical                          =  79,
	Control_Pictures                                 =  80,
	Optical_Character_Recognition                    =  81,
	Enclosed_Alphanumerics                           =  82,
	Box_Drawing                                      =  83,
	Block_Elements                                   =  84,
	Geometric_Shapes                                 =  85,
	Miscellaneous_Symbols                            =  86,
	Dingbats                                         =  87,
	Miscellaneous_Mathematical_Symbols_A             =  88,
	Supplemental_Arrows_A                            =  89,
	Braille_Patterns                                 =  90,
	Supplemental_Arrows_B                            =  91,
	Miscellaneous_Mathematical_Symbols_B             =  92,
	Supplemental_Mathematical_Operators              =  93,
	Miscellaneous_Symbols_and_Arrows                 =  94,
	Glagolitic                                       =  95,
	Latin_Extended_C                                 =  96,
	Coptic                                           =  97,
	Georgian_Supplement                              =  98,
	Tifinagh                                         =  99,
	Ethiopic_Extended                                = 100,
	Cyrillic_Extended_A                              = 101,
	Supplemental_Punctuation                         = 102,
	CJK_Radicals_Supplement                          = 103,
	Kangxi_Radicals                                  = 104,
	Ideographic_Description_Characters               = 105,
	CJK_Symbols_and_Punctuation                      = 106,
	Hiragana                                         = 107,
	Katakana                                         = 108,
	Bopomofo                                         = 109,
	Hangul_Compatibility_Jamo                        = 110,
	Kanbun                                           = 111,
	Bopomofo_Extended                                = 112,
	CJK_Strokes                                      = 113,
	Katakana_Phonetic_Extensions                     = 114,
	Enclosed_CJK_Letters_and_Months                  = 115,
	CJK_Compatibility                                = 116,
	CJK_Unified_Ideographs_Extension_A               = 117,
	Yijing_Hexagram_Symbols                          = 118,
	CJK_Unified_Ideographs                           = 119,
	Yi_Syllables                                     = 120,
	Yi_Radicals                                      = 121,
	Lisu                                             = 122,
	Vai                                              = 123,
	Cyrillic_Extended_B                              = 124,
	Bamum                                            = 125,
	Modifier_Tone_Letters                            = 126,
	Latin_Extended_D                                 = 127,
	Syloti_Nagri                                     = 128,
	Common_Indic_Number_Forms                        = 129,
	Phags_pa                                         = 130,
	Saurashtra                                       = 131,
	Devanagari_Extended                              = 132,
	Kayah_Li                                         = 133,
	Rejang                                           = 134,
	Hangul_Jamo_Extended_A                           = 135,
	Javanese                                         = 136,
	Myanmar_Extended_B                               = 137,
	Cham                                             = 138,
	Myanmar_Extended_A                               = 139,
	Tai_Viet                                         = 140,
	Meetei_Mayek_Extensions                          = 141,
	Ethiopic_Extended_A                              = 142,
	Latin_Extended_E                                 = 143,
	Cherokee_Supplement                              = 144,
	Meetei_Mayek                                     = 145,
	Hangul_Syllables                                 = 146,
	Hangul_Jamo_Extended_B                           = 147,
	High_Surrogates                                  = 148,
	High_Private_Use_Surrogates                      = 149,
	Low_Surrogates                                   = 150,
	Private_Use_Area                                 = 151,
	CJK_Compatibility_Ideographs                     = 152,
	Alphabetic_Presentation_Forms                    = 153,
	Arabic_Presentation_Forms_A                      = 154,
	Variation_Selectors                              = 155,
	Vertical_Forms                                   = 156,
	Combining_Half_Marks                             = 157,
	CJK_Compatibility_Forms                          = 158,
	Small_Form_Variants                              = 159,
	Arabic_Presentation_Forms_B                      = 160,
	Halfwidth_and_Fullwidth_Forms                    = 161,
	Specials                                         = 162,
	Linear_B_Syllabary                               = 163,
	Linear_B_Ideograms                               = 164,
	Aegean_Numbers                                   = 165,
	Ancient_Greek_Numbers                            = 166,
	Ancient_Symbols                                  = 167,
	Phaistos_Disc                                    = 168,
	Lycian                                           = 169,
	Carian                                           = 170,
	Coptic_Epact_Numbers                             = 171,
	Old_Italic                                       = 172,
	Gothic                                           = 173,
	Old_Permic                                       = 174,
	Ugaritic                                         = 175,
	Old_Persian                                      = 176,
	Deseret                                          = 177,
	Shavian                                          = 178,
	Osmanya                                          = 179,
	Osage                                            = 180,
	Elbasan                                          = 181,
	Caucasian_Albanian                               = 182,
	Linear_A                                         = 183,
	Cypriot_Syllabary                                = 184,
	Imperial_Aramaic                                 = 185,
	Palmyrene                                        = 186,
	Nabataean                                        = 187,
	Hatran                                           = 188,
	Phoenician                                       = 189,
	Lydian                                           = 190,
	Meroitic_Hieroglyphs                             = 191,
	Meroitic_Cursive                                 = 192,
	Kharoshthi                                       = 193,
	Old_South_Arabian                                = 194,
	Old_North_Arabian                                = 195,
	Manichaean                                       = 196,
	Avestan                                          = 197,
	Inscriptional_Parthian                           = 198,
	Inscriptional_Pahlavi                            = 199,
	Psalter_Pahlavi                                  = 200,
	Old_Turkic                                       = 201,
	Old_Hungarian                                    = 202,
	Rumi_Numeral_Symbols                             = 203,
	Brahmi                                           = 204,
	Kaithi                                           = 205,
	Sora_Sompeng                                     = 206,
	Chakma                                           = 207,
	Mahajani                                         = 208,
	Sharada                                          = 209,
	Sinhala_Archaic_Numbers                          = 210,
	Khojki                                           = 211,
	Multani                                          = 212,
	Khudawadi                                        = 213,
	Grantha                                          = 214,
	Newa                                             = 215,
	Tirhuta                                          = 216,
	Siddham                                          = 217,
	Modi                                             = 218,
	Mongolian_Supplement                             = 219,
	Takri                                            = 220,
	Ahom                                             = 221,
	Warang_Citi                                      = 222,
	Zanabazar_Square                                 = 223,
	Soyombo                                          = 224,
	Pau_Cin_Hau                                      = 225,
	Bhaiksuki                                        = 226,
	Marchen                                          = 227,
	Masaram_Gondi                                    = 228,
	Cuneiform                                        = 229,
	Cuneiform_Numbers_and_Punctuation                = 230,
	Early_Dynastic_Cuneiform                         = 231,
	Egyptian_Hieroglyphs                             = 232,
	Anatolian_Hieroglyphs                            = 233,
	Bamum_Supplement                                 = 234,
	Mro                                              = 235,
	Bassa_Vah                                        = 236,
	Pahawh_Hmong                                     = 237,
	Miao                                             = 238,
	Ideographic_Symbols_and_Punctuation              = 239,
	Tangut                                           = 240,
	Tangut_Components                                = 241,
	Kana_Supplement                                  = 242,
	Kana_Extended_A                                  = 243,
	Nushu                                            = 244,
	Duployan                                         = 245,
	Shorthand_Format_Controls                        = 246,
	Byzantine_Musical_Symbols                        = 247,
	Musical_Symbols                                  = 248,
	Ancient_Greek_Musical_Notation                   = 249,
	Tai_Xuan_Jing_Symbols                            = 250,
	Counting_Rod_Numerals                            = 251,
	Mathematical_Alphanumeric_Symbols                = 252,
	Sutton_SignWriting                               = 253,
	Glagolitic_Supplement                            = 254,
	Mende_Kikakui                                    = 255,
	Adlam                                            = 256,
	Arabic_Mathematical_Alphabetic_Symbols           = 257,
	Mahjong_Tiles                                    = 258,
	Domino_Tiles                                     = 259,
	Playing_Cards                                    = 260,
	Enclosed_Alphanumeric_Supplement                 = 261,
	Enclosed_Ideographic_Supplement                  = 262,
	Miscellaneous_Symbols_and_Pictographs            = 263,
	Emoticons                                        = 264,
	Ornamental_Dingbats                              = 265,
	Transport_and_Map_Symbols                        = 266,
	Alchemical_Symbols                               = 267,
	Geometric_Shapes_Extended                        = 268,
	Supplemental_Arrows_C                            = 269,
	Supplemental_Symbols_and_Pictographs             = 270,
	CJK_Unified_Ideographs_Extension_B               = 271,
	CJK_Unified_Ideographs_Extension_C               = 272,
	CJK_Unified_Ideographs_Extension_D               = 273,
	CJK_Unified_Ideographs_Extension_E               = 274,
	CJK_Unified_Ideographs_Extension_F               = 275,
	CJK_Compatibility_Ideographs_Supplement          = 276,
	Tags                                             = 277,
	Variation_Selectors_Supplement                   = 278,
	Supplementary_Private_Use_Area_A                 = 279,
	Supplementary_Private_Use_Area_B                 = 280,
	Georgian_Extended                                = 281,
	Hanifi_Rohingya                                  = 282,
	Old_Sogdian                                      = 283,
	Sogdian                                          = 284,
	Dogra                                            = 285,
	Gunjala_Gondi                                    = 286,
	Makasar                                          = 287,
	Medefaidrin                                      = 288,
	Mayan_Numerals                                   = 289,
	Indic_Siyaq_Numbers                              = 290,
	Chess_Symbols                                    = 291,
	Elymaic                                          = 292,
	Nandinagari                                      = 293,
	Tamil_Supplement                                 = 294,
	Egyptian_Hieroglyph_Format_Controls              = 295,
	Small_Kana_Extension                             = 296,
	Nyiakeng_Puachue_Hmong                           = 297,
	Wancho                                           = 298,
	Ottoman_Siyaq_Numbers                            = 299,
	Symbols_and_Pictographs_Extended_A               = 300,
	Yezidi                                           = 301,
	Chorasmian                                       = 302,
	Dives_Akuru                                      = 303,
	Lisu_Supplement                                  = 304,
	Khitan_Small_Script                              = 305,
	Tangut_Supplement                                = 306,
	Symbols_for_Legacy_Computing                     = 307,
	CJK_Unified_Ideographs_Extension_G               = 308,
	Arabic_Extended_B                                = 309,
	Vithkuqi                                         = 310,
	Latin_Extended_F                                 = 311,
	Old_Uyghur                                       = 312,
	Unified_Canadian_Aboriginal_Syllabics_Extended_A = 313,
	Cypro_Minoan                                     = 314,
	Tangsa                                           = 315,
	Kana_Extended_B                                  = 316,
	Znamenny_Musical_Notation                        = 317,
	Latin_Extended_G                                 = 318,
	Toto                                             = 319,
	Ethiopic_Extended_B                              = 320,
	Arabic_Extended_C                                = 321,
	Devanagari_Extended_A                            = 322,
	Kawi                                             = 323,
	Kaktovik_Numerals                                = 324,
	Cyrillic_Extended_D                              = 325,
	Nag_Mundari                                      = 326,
	CJK_Unified_Ideographs_Extension_H               = 327,
	CJK_Unified_Ideographs_Extension_I               = 328
};

// Character Age
enum class agetype : std::uint_least8_t
{
	Unassigned   =   0,
	v1_1         =   1,
	v2_0         =   2,
	v2_1         =   3,
	v3_0         =   4,
	v3_1         =   5,
	v3_2         =   6,
	v4_0         =   7,
	v4_1         =   8,
	v5_0         =   9,
	v5_1         =  10,
	v5_2         =  11,
	v6_0         =  12,
	v6_1         =  13,
	v6_2         =  14,
	v6_3         =  15,
	v7_0         =  16,
	v8_0         =  17,
	v9_0         =  18,
	v10_0        =  19,
	v11_0        =  20,
	v12_0        =  21,
	v12_1        =  22,
	v13_0        =  23,
	v14_0        =  24,
	v15_0        =  25,
	v15_1        =  26
};

// East Asian Width
enum class eawtype : std::uint_least8_t
{
	N    =   0,
	A    =   1,
	F    =   2,
	H    =   3,
	Na   =   4,
	W    =   5
};

// Property Traits
enum class property_enum
{
	invalid,
	ctype,
	ptype,
	gctype,
	sctype,
	blktype,
	agetype,
	eawtype
};

template <class T> inline constexpr property_enum to_property_enum_v = property_enum::invalid;
template <> inline constexpr property_enum to_property_enum_v<ctype> = property_enum::ctype;
template <> inline constexpr property_enum to_property_enum_v<ptype> = property_enum::ptype;
template <> inline constexpr property_enum to_property_enum_v<gctype> = property_enum::gctype;
template <> inline constexpr property_enum to_property_enum_v<sctype> = property_enum::sctype;
template <> inline constexpr property_enum to_property_enum_v<blktype> = property_enum::blktype;
template <> inline constexpr property_enum to_property_enum_v<agetype> = property_enum::agetype;
template <> inline constexpr property_enum to_property_enum_v<eawtype> = property_enum::eawtype;

template <class T> inline constexpr bool is_property_enum_v = to_property_enum_v<std::decay_t<T>> != property_enum::invalid;

// Unicode Character Database record
class record
{
	struct raw_record {
		std::uint_least64_t pflags;
		std::uint_least16_t cflags;
		std::uint_least16_t abfields;
		std::uint_least8_t gcindex;
		std::uint_least8_t scindex;
		std::uint_least8_t wfields;
		std::uint_least8_t cfindex;
		std::uint_least8_t clindex;
		std::uint_least8_t cuindex;
	} const* raw_;
	explicit record(raw_record const* r) noexcept : raw_(r) {}
	struct raw_record_table {
		std::array<std::uint_least16_t, 8704> stage1;
		std::array<std::uint_least16_t, 39680> stage2;
		std::array<raw_record, 1902> records;
	};
	static std::int_least32_t case_mapping(std::size_t index) noexcept;
	static std::unique_ptr<raw_record_table> decompress_table();
	friend record query(char32_t r);
public:
	ctype compatibility() const noexcept { return static_cast<ctype>(raw_->cflags); }
	ptype properties() const noexcept { return static_cast<ptype>(raw_->pflags); }
	gctype general_category() const noexcept { return static_cast<gctype>(UINT32_C(1) << raw_->gcindex); }
	sctype script() const noexcept { return static_cast<sctype>(raw_->scindex); }
	blktype block() const noexcept { return static_cast<blktype>(raw_->abfields & 0x3ff); }
	agetype age() const noexcept { return static_cast<agetype>(raw_->abfields >> 10); }
	eawtype eawidth() const noexcept { return static_cast<eawtype>(raw_->wfields & 0x0f); }
	int cwidth() const noexcept { return static_cast<int>(raw_->wfields >> 4) - 1; }
	std::int_least32_t casefold_mapping() const noexcept { return case_mapping(raw_->cfindex); }
	std::int_least32_t lowercase_mapping() const noexcept { return case_mapping(raw_->clindex); }
	std::int_least32_t uppercase_mapping() const noexcept { return case_mapping(raw_->cuindex); }
	bool all_of(ctype c) const noexcept { return (compatibility() & c) == c; }
	bool all_of(ptype p) const noexcept { return (properties() & p) == p; }
	bool all_of(gctype gc) const noexcept { return (general_category() & gc) == gc; }
	bool any_of(ctype c) const noexcept { return (compatibility() & c) != ctype::none; }
	bool any_of(ptype p) const noexcept { return (properties() & p) != ptype::None; }
	bool any_of(gctype gc) const noexcept { return (general_category() & gc) != gctype::None; }
	bool none_of(ctype c) const noexcept { return (compatibility() & c) == ctype::none; }
	bool none_of(ptype p) const noexcept { return (properties() & p) == ptype::None; }
	bool none_of(gctype gc) const noexcept { return (general_category() & gc) == gctype::None; }
};

// Retrieves the UCD record for the given codepoint
inline record query(char32_t r)
{
	static auto const table = record::decompress_table();
	std::size_t index = 1901;
	if (r < 0x110000) {
		index = table->stage1[r >> 7];
		index = table->stage2[(index << 7) | (r & 0x7f)];
	}
	return record{&table->records[index]};
}

// Checks if the rune matches all of the string-packed property classes
inline bool all_of(record const& rec, property_enum penum, std::string_view str)
{
	bool result;
	switch (penum) {
		case property_enum::ctype: result = rec.all_of(lug::detail::string_unpack<ctype>(str)); break;
		case property_enum::ptype: result = rec.all_of(lug::detail::string_unpack<ptype>(str)); break;
		case property_enum::gctype: result = rec.all_of(lug::detail::string_unpack<gctype>(str)); break;
		case property_enum::sctype: result = rec.script() == lug::detail::string_unpack<sctype>(str); break;
		case property_enum::blktype: result = rec.block() == lug::detail::string_unpack<blktype>(str); break;
		case property_enum::agetype: result = rec.age() == lug::detail::string_unpack<agetype>(str); break;
		case property_enum::eawtype: result = rec.eawidth() == lug::detail::string_unpack<eawtype>(str); break;
		default: result = false; break;
	}
	return result;
}

// Checks if the rune matches any of the string-packed property classes
inline bool any_of(record const& rec, property_enum penum, std::string_view str)
{
	bool result;
	switch (penum) {
		case property_enum::ctype: result = rec.any_of(lug::detail::string_unpack<ctype>(str)); break;
		case property_enum::ptype: result = rec.any_of(lug::detail::string_unpack<ptype>(str)); break;
		case property_enum::gctype: result = rec.any_of(lug::detail::string_unpack<gctype>(str)); break;
		case property_enum::sctype: result = rec.script() == lug::detail::string_unpack<sctype>(str); break;
		case property_enum::blktype: result = rec.block() == lug::detail::string_unpack<blktype>(str); break;
		case property_enum::agetype: result = rec.age() == lug::detail::string_unpack<agetype>(str); break;
		case property_enum::eawtype: result = rec.eawidth() == lug::detail::string_unpack<eawtype>(str); break;
		default: result = false; break;
	}
	return result;
}

// Checks if the rune matches none of the string-packed property classes
inline bool none_of(record const& rec, property_enum penum, std::string_view str)
{
	bool result;
	switch (penum) {
		case property_enum::ctype: result = rec.none_of(lug::detail::string_unpack<ctype>(str)); break;
		case property_enum::ptype: result = rec.none_of(lug::detail::string_unpack<ptype>(str)); break;
		case property_enum::gctype: result = rec.none_of(lug::detail::string_unpack<gctype>(str)); break;
		case property_enum::sctype: result = rec.script() != lug::detail::string_unpack<sctype>(str); break;
		case property_enum::blktype: result = rec.block() != lug::detail::string_unpack<blktype>(str); break;
		case property_enum::agetype: result = rec.age() != lug::detail::string_unpack<agetype>(str); break;
		case property_enum::eawtype: result = rec.eawidth() != lug::detail::string_unpack<eawtype>(str); break;
		default: result = false; break;
	}
	return result;
}

// Column width (-1 = non-displayable, 0 = non-spacing, 1 = normal, 2 = wide)
inline int cwidth(char32_t r)
{
	return query(r).cwidth();
}

// Absolute column width
inline unsigned int ucwidth(char32_t r)
{
	auto const cw = query(r).cwidth();
	return static_cast<unsigned int>(cw >= 0 ? cw : -cw);
}

// Simple casefold conversion
inline char32_t tocasefold(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).casefold_mapping());
}

// Simple lowercase conversion
inline char32_t tolower(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).lowercase_mapping());
}

// Simple uppercase conversion
inline char32_t toupper(char32_t r)
{
	return static_cast<char32_t>(static_cast<std::int_least32_t>(r) + query(r).uppercase_mapping());
}

// Sparse character rune set
using rune_set = std::vector<std::pair<char32_t, char32_t>>;

inline void push_range(rune_set& runes, char32_t start, char32_t end)
{
	runes.emplace_back(start, end);
	std::push_heap(std::begin(runes), std::end(runes));
}

namespace detail {

inline void push_uniform_casefolded_range(rune_set& runes, ptype props, char32_t start, char32_t end)
{
	if ((props & ptype::Cased) != ptype::None) {
		push_range(runes, tolower(start), tolower(end));
		push_range(runes, toupper(start), toupper(end));
	} else {
		push_range(runes, start, end);
	}
}

} // namespace detail

inline void push_casefolded_range(rune_set& runes, char32_t start, char32_t end)
{
	ptype p = query(start).properties();
	char32_t r1 = start, r2 = start;
	for (char32_t rn = start + 1; rn <= end; r2 = rn, ++rn) {
		ptype q = query(start).properties();
		if (((p ^ q) & ptype::Cased) != ptype::None) {
			detail::push_uniform_casefolded_range(runes, p, r1, r2);
			r1 = rn;
			p = q;
		}
	}
	detail::push_uniform_casefolded_range(runes, p, r1, r2);
}

inline rune_set sort_and_optimize(rune_set runes)
{
	rune_set optimized_runes;
	auto out = optimized_runes.end();
	std::sort_heap(std::begin(runes), std::end(runes));
	for (auto curr = std::cbegin(runes), last = std::cend(runes); curr != last; ++curr) {
		if (out == optimized_runes.end() || curr->first < out->first || out->second < curr->first)
			out = optimized_runes.insert(optimized_runes.end(), *curr);
		else
			out->second = out->second < curr->second ? curr->second : out->second;
	}
	optimized_runes.shrink_to_fit();
	return optimized_runes;
}

inline rune_set negate(rune_set const& runes)
{
	rune_set negated_runes;
	if (!runes.empty()) {
		if (char32_t front = runes.front().first; U'\0' < front)
			negated_runes.push_back({U'\0', front - 1});
		if (runes.size() > 1) {
			auto const last = std::cend(runes);
			auto left = std::cbegin(runes);
			for (;;) {
				auto right = std::next(left);
				if (right == last)
					break;
				negated_runes.push_back({left->second + 1, right->first - 1});
				left = right;
			}
		}
		if (char32_t back = runes.back().second; back < U'\xFFFFFFFF')
			negated_runes.push_back({back + 1, U'\xFFFFFFFF'});
		negated_runes.shrink_to_fit();
	}
	return negated_runes;
}

namespace detail {

inline std::string normalize_property_label(std::string_view id)
{
	std::string normid;
	for (char c : id)
		if (c != ' ' && c != '\t' && c != '_' && c != '-' && c != '.' && c != ';')
			normid.push_back(static_cast<char>(std::tolower(c)));
	return normid;
}

} // namespace detail

// Convert from text to ctype property
inline std::optional<ctype> stoctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using ct = ctype;

	static constexpr std::array<std::pair<std::string_view, ctype>, 13> labels =
	{ {
		{ "alnum"sv, ct::alnum }, { "alpha"sv, ct::alpha }, { "blank"sv, ct::blank }, { "cntrl"sv, ct::cntrl },
		{ "digit"sv, ct::digit }, { "graph"sv, ct::graph }, { "lower"sv, ct::lower }, { "print"sv, ct::print },
		{ "punct"sv, ct::punct }, { "space"sv, ct::space }, { "upper"sv, ct::upper }, { "word"sv, ct::word },
		{ "xdigit"sv, ct::xdigit }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ctype>{static_cast<ctype>(c->second)} : std::nullopt;
}

// Convert from text to ptype property
inline std::optional<ptype> stoptype(std::string_view s)
{
	using namespace std::string_view_literals;
	using pt = ptype;

	static constexpr std::array<std::pair<std::string_view, ptype>, 62> labels =
	{ {
		{ "alphabetic"sv, pt::Alphabetic }, { "any"sv, pt::Any }, { "ascii"sv, pt::Ascii },
		{ "asciihexdigit"sv, pt::ASCII_Hex_Digit }, { "assigned"sv, pt::Assigned }, { "bidicontrol"sv, pt::Bidi_Control },
		{ "cased"sv, pt::Cased }, { "caseignorable"sv, pt::Case_Ignorable },
		{ "changeswhencasefolded"sv, pt::Changes_When_Casefolded }, { "changeswhencasemapped"sv, pt::Changes_When_Casemapped },
		{ "changeswhenlowercased"sv, pt::Changes_When_Lowercased }, { "changeswhentitlecased"sv, pt::Changes_When_Titlecased },
		{ "changeswhenuppercased"sv, pt::Changes_When_Uppercased }, { "dash"sv, pt::Dash },
		{ "defaultignorablecodepoint"sv, pt::Default_Ignorable_Code_Point }, { "deprecated"sv, pt::Deprecated },
		{ "diacritic"sv, pt::Diacritic }, { "extender"sv, pt::Extender }, { "graphemebase"sv, pt::Grapheme_Base },
		{ "graphemeextend"sv, pt::Grapheme_Extend }, { "graphemelink"sv, pt::Grapheme_Link }, { "hexdigit"sv, pt::Hex_Digit },
		{ "idcompatmathcontinue"sv, pt::ID_Compat_Math_Continue }, { "idcompatmathstart"sv, pt::ID_Compat_Math_Start },
		{ "idcontinue"sv, pt::ID_Continue }, { "ideographic"sv, pt::Ideographic },
		{ "idsbinaryoperator"sv, pt::IDS_Binary_Operator }, { "idstart"sv, pt::ID_Start },
		{ "idstrinaryoperator"sv, pt::IDS_Trinary_Operator }, { "idsunaryoperator"sv, pt::IDS_Unary_Operator },
		{ "incbconsonant"sv, pt::InCB_Consonant }, { "incbextend"sv, pt::InCB_Extend }, { "incblinker"sv, pt::InCB_Linker },
		{ "joincontrol"sv, pt::Join_Control }, { "lineending"sv, pt::Line_Ending },
		{ "logicalorderexception"sv, pt::Logical_Order_Exception }, { "lowercase"sv, pt::Lowercase }, { "math"sv, pt::Math },
		{ "noncharactercodepoint"sv, pt::Noncharacter_Code_Point }, { "otheralphabetic"sv, pt::Other_Alphabetic },
		{ "otherdefaultignorablecodepoint"sv, pt::Other_Default_Ignorable_Code_Point },
		{ "othergraphemeextend"sv, pt::Other_Grapheme_Extend }, { "otheridcontinue"sv, pt::Other_ID_Continue },
		{ "otheridstart"sv, pt::Other_ID_Start }, { "otherlowercase"sv, pt::Other_Lowercase }, { "othermath"sv, pt::Other_Math },
		{ "otheruppercase"sv, pt::Other_Uppercase }, { "patternsyntax"sv, pt::Pattern_Syntax },
		{ "patternwhitespace"sv, pt::Pattern_White_Space }, { "prependedconcatenationmark"sv, pt::Prepended_Concatenation_Mark },
		{ "quotationmark"sv, pt::Quotation_Mark }, { "radical"sv, pt::Radical },
		{ "regionalindicator"sv, pt::Regional_Indicator }, { "sentenceterminal"sv, pt::Sentence_Terminal },
		{ "softdotted"sv, pt::Soft_Dotted }, { "terminalpunctuation"sv, pt::Terminal_Punctuation },
		{ "unifiedideograph"sv, pt::Unified_Ideograph }, { "uppercase"sv, pt::Uppercase },
		{ "variationselector"sv, pt::Variation_Selector }, { "whitespace"sv, pt::White_Space },
		{ "xidcontinue"sv, pt::XID_Continue }, { "xidstart"sv, pt::XID_Start }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<ptype>{static_cast<ptype>(c->second)} : std::nullopt;
}

// Convert from text to gctype property
inline std::optional<gctype> stogctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using gc = gctype;

	static constexpr std::array<std::pair<std::string_view, gctype>, 60> labels =
	{ {
		{ "cc"sv, gc::Cc }, { "cf"sv, gc::Cf }, { "closepunctuation"sv, gc::Pe }, { "cn"sv, gc::Cn }, { "co"sv, gc::Co },
		{ "connectorpunctuation"sv, gc::Pc }, { "control"sv, gc::Cc }, { "cs"sv, gc::Cs }, { "currencysymbol"sv, gc::Sc },
		{ "dashpunctuation"sv, gc::Pd }, { "decimalnumber"sv, gc::Nd }, { "enclosingmark"sv, gc::Me },
		{ "finalpunctuation"sv, gc::Pf }, { "format"sv, gc::Cf }, { "initialpunctuation"sv, gc::Pi },
		{ "letternumber"sv, gc::Nl }, { "lineseparator"sv, gc::Zl }, { "ll"sv, gc::Ll }, { "lm"sv, gc::Lm }, { "lo"sv, gc::Lo },
		{ "lowercaseletter"sv, gc::Ll }, { "lt"sv, gc::Lt }, { "lu"sv, gc::Lu }, { "mathematicalsymbol"sv, gc::Sm },
		{ "mc"sv, gc::Mc }, { "me"sv, gc::Me }, { "mn"sv, gc::Mn }, { "modifierletter"sv, gc::Lm },
		{ "modifiersymbol"sv, gc::Sk }, { "nd"sv, gc::Nd }, { "nl"sv, gc::Nl }, { "no"sv, gc::No },
		{ "nonspacingmark"sv, gc::Mn }, { "openpunctuation"sv, gc::Ps }, { "otherletter"sv, gc::Lo },
		{ "othernumber"sv, gc::No }, { "otherpunctuation"sv, gc::Po }, { "othersymbol"sv, gc::So },
		{ "paragraphseparator"sv, gc::Zp }, { "pc"sv, gc::Pc }, { "pd"sv, gc::Pd }, { "pe"sv, gc::Pe }, { "pf"sv, gc::Pf },
		{ "pi"sv, gc::Pi }, { "po"sv, gc::Po }, { "privateuse"sv, gc::Co }, { "ps"sv, gc::Ps }, { "sc"sv, gc::Sc },
		{ "sk"sv, gc::Sk }, { "sm"sv, gc::Sm }, { "so"sv, gc::So }, { "spaceseparator"sv, gc::Zs }, { "spacingmark"sv, gc::Mc },
		{ "surrogate"sv, gc::Cs }, { "titlecaseletter"sv, gc::Lt }, { "unassigned"sv, gc::Cn }, { "uppercaseletter"sv, gc::Lu },
		{ "zl"sv, gc::Zl }, { "zp"sv, gc::Zp }, { "zs"sv, gc::Zs }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<gctype>{static_cast<gctype>(c->second)} : std::nullopt;
}

// Convert from text to sctype property
inline std::optional<sctype> stosctype(std::string_view s)
{
	using namespace std::string_view_literals;
	using sc = sctype;

	static constexpr std::array<std::pair<std::string_view, sctype>, 164> labels =
	{ {
		{ "adlam"sv, sc::Adlam }, { "ahom"sv, sc::Ahom }, { "anatolianhieroglyphs"sv, sc::Anatolian_Hieroglyphs },
		{ "arabic"sv, sc::Arabic }, { "armenian"sv, sc::Armenian }, { "avestan"sv, sc::Avestan }, { "balinese"sv, sc::Balinese },
		{ "bamum"sv, sc::Bamum }, { "bassavah"sv, sc::Bassa_Vah }, { "batak"sv, sc::Batak }, { "bengali"sv, sc::Bengali },
		{ "bhaiksuki"sv, sc::Bhaiksuki }, { "bopomofo"sv, sc::Bopomofo }, { "brahmi"sv, sc::Brahmi },
		{ "braille"sv, sc::Braille }, { "buginese"sv, sc::Buginese }, { "buhid"sv, sc::Buhid },
		{ "canadianaboriginal"sv, sc::Canadian_Aboriginal }, { "carian"sv, sc::Carian },
		{ "caucasianalbanian"sv, sc::Caucasian_Albanian }, { "chakma"sv, sc::Chakma }, { "cham"sv, sc::Cham },
		{ "cherokee"sv, sc::Cherokee }, { "chorasmian"sv, sc::Chorasmian }, { "common"sv, sc::Common },
		{ "coptic"sv, sc::Coptic }, { "cuneiform"sv, sc::Cuneiform }, { "cypriot"sv, sc::Cypriot },
		{ "cyprominoan"sv, sc::Cypro_Minoan }, { "cyrillic"sv, sc::Cyrillic }, { "deseret"sv, sc::Deseret },
		{ "devanagari"sv, sc::Devanagari }, { "divesakuru"sv, sc::Dives_Akuru }, { "dogra"sv, sc::Dogra },
		{ "duployan"sv, sc::Duployan }, { "egyptianhieroglyphs"sv, sc::Egyptian_Hieroglyphs }, { "elbasan"sv, sc::Elbasan },
		{ "elymaic"sv, sc::Elymaic }, { "ethiopic"sv, sc::Ethiopic }, { "georgian"sv, sc::Georgian },
		{ "glagolitic"sv, sc::Glagolitic }, { "gothic"sv, sc::Gothic }, { "grantha"sv, sc::Grantha }, { "greek"sv, sc::Greek },
		{ "gujarati"sv, sc::Gujarati }, { "gunjalagondi"sv, sc::Gunjala_Gondi }, { "gurmukhi"sv, sc::Gurmukhi },
		{ "han"sv, sc::Han }, { "hangul"sv, sc::Hangul }, { "hanifirohingya"sv, sc::Hanifi_Rohingya },
		{ "hanunoo"sv, sc::Hanunoo }, { "hatran"sv, sc::Hatran }, { "hebrew"sv, sc::Hebrew }, { "hiragana"sv, sc::Hiragana },
		{ "imperialaramaic"sv, sc::Imperial_Aramaic }, { "inherited"sv, sc::Inherited },
		{ "inscriptionalpahlavi"sv, sc::Inscriptional_Pahlavi }, { "inscriptionalparthian"sv, sc::Inscriptional_Parthian },
		{ "javanese"sv, sc::Javanese }, { "kaithi"sv, sc::Kaithi }, { "kannada"sv, sc::Kannada }, { "katakana"sv, sc::Katakana },
		{ "kawi"sv, sc::Kawi }, { "kayahli"sv, sc::Kayah_Li }, { "kharoshthi"sv, sc::Kharoshthi },
		{ "khitansmallscript"sv, sc::Khitan_Small_Script }, { "khmer"sv, sc::Khmer }, { "khojki"sv, sc::Khojki },
		{ "khudawadi"sv, sc::Khudawadi }, { "lao"sv, sc::Lao }, { "latin"sv, sc::Latin }, { "lepcha"sv, sc::Lepcha },
		{ "limbu"sv, sc::Limbu }, { "lineara"sv, sc::Linear_A }, { "linearb"sv, sc::Linear_B }, { "lisu"sv, sc::Lisu },
		{ "lycian"sv, sc::Lycian }, { "lydian"sv, sc::Lydian }, { "mahajani"sv, sc::Mahajani }, { "makasar"sv, sc::Makasar },
		{ "malayalam"sv, sc::Malayalam }, { "mandaic"sv, sc::Mandaic }, { "manichaean"sv, sc::Manichaean },
		{ "marchen"sv, sc::Marchen }, { "masaramgondi"sv, sc::Masaram_Gondi }, { "medefaidrin"sv, sc::Medefaidrin },
		{ "meeteimayek"sv, sc::Meetei_Mayek }, { "mendekikakui"sv, sc::Mende_Kikakui },
		{ "meroiticcursive"sv, sc::Meroitic_Cursive }, { "meroitichieroglyphs"sv, sc::Meroitic_Hieroglyphs },
		{ "miao"sv, sc::Miao }, { "modi"sv, sc::Modi }, { "mongolian"sv, sc::Mongolian }, { "mro"sv, sc::Mro },
		{ "multani"sv, sc::Multani }, { "myanmar"sv, sc::Myanmar }, { "nabataean"sv, sc::Nabataean },
		{ "nagmundari"sv, sc::Nag_Mundari }, { "nandinagari"sv, sc::Nandinagari }, { "newa"sv, sc::Newa },
		{ "newtailue"sv, sc::New_Tai_Lue }, { "nko"sv, sc::Nko }, { "nushu"sv, sc::Nushu },
		{ "nyiakengpuachuehmong"sv, sc::Nyiakeng_Puachue_Hmong }, { "ogham"sv, sc::Ogham }, { "olchiki"sv, sc::Ol_Chiki },
		{ "oldhungarian"sv, sc::Old_Hungarian }, { "olditalic"sv, sc::Old_Italic },
		{ "oldnortharabian"sv, sc::Old_North_Arabian }, { "oldpermic"sv, sc::Old_Permic }, { "oldpersian"sv, sc::Old_Persian },
		{ "oldsogdian"sv, sc::Old_Sogdian }, { "oldsoutharabian"sv, sc::Old_South_Arabian }, { "oldturkic"sv, sc::Old_Turkic },
		{ "olduyghur"sv, sc::Old_Uyghur }, { "oriya"sv, sc::Oriya }, { "osage"sv, sc::Osage }, { "osmanya"sv, sc::Osmanya },
		{ "pahawhhmong"sv, sc::Pahawh_Hmong }, { "palmyrene"sv, sc::Palmyrene }, { "paucinhau"sv, sc::Pau_Cin_Hau },
		{ "phagspa"sv, sc::Phags_Pa }, { "phoenician"sv, sc::Phoenician }, { "psalterpahlavi"sv, sc::Psalter_Pahlavi },
		{ "rejang"sv, sc::Rejang }, { "runic"sv, sc::Runic }, { "samaritan"sv, sc::Samaritan },
		{ "saurashtra"sv, sc::Saurashtra }, { "sharada"sv, sc::Sharada }, { "shavian"sv, sc::Shavian },
		{ "siddham"sv, sc::Siddham }, { "signwriting"sv, sc::SignWriting }, { "sinhala"sv, sc::Sinhala },
		{ "sogdian"sv, sc::Sogdian }, { "sorasompeng"sv, sc::Sora_Sompeng }, { "soyombo"sv, sc::Soyombo },
		{ "sundanese"sv, sc::Sundanese }, { "sylotinagri"sv, sc::Syloti_Nagri }, { "syriac"sv, sc::Syriac },
		{ "tagalog"sv, sc::Tagalog }, { "tagbanwa"sv, sc::Tagbanwa }, { "taile"sv, sc::Tai_Le }, { "taitham"sv, sc::Tai_Tham },
		{ "taiviet"sv, sc::Tai_Viet }, { "takri"sv, sc::Takri }, { "tamil"sv, sc::Tamil }, { "tangsa"sv, sc::Tangsa },
		{ "tangut"sv, sc::Tangut }, { "telugu"sv, sc::Telugu }, { "thaana"sv, sc::Thaana }, { "thai"sv, sc::Thai },
		{ "tibetan"sv, sc::Tibetan }, { "tifinagh"sv, sc::Tifinagh }, { "tirhuta"sv, sc::Tirhuta }, { "toto"sv, sc::Toto },
		{ "ugaritic"sv, sc::Ugaritic }, { "unknown"sv, sc::Unknown }, { "vai"sv, sc::Vai }, { "vithkuqi"sv, sc::Vithkuqi },
		{ "wancho"sv, sc::Wancho }, { "warangciti"sv, sc::Warang_Citi }, { "yezidi"sv, sc::Yezidi }, { "yi"sv, sc::Yi },
		{ "zanabazarsquare"sv, sc::Zanabazar_Square }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<sctype>{static_cast<sctype>(c->second)} : std::nullopt;
}

// Convert from text to blktype property
inline std::optional<blktype> stoblktype(std::string_view s)
{
	using namespace std::string_view_literals;
	using blk = blktype;

	static constexpr std::array<std::pair<std::string_view, blktype>, 329> labels =
	{ {
		{ "adlam"sv, blk::Adlam }, { "aegeannumbers"sv, blk::Aegean_Numbers }, { "ahom"sv, blk::Ahom },
		{ "alchemicalsymbols"sv, blk::Alchemical_Symbols }, { "alphabeticpresentationforms"sv, blk::Alphabetic_Presentation_Forms },
		{ "anatolianhieroglyphs"sv, blk::Anatolian_Hieroglyphs }, { "ancientgreekmusicalnotation"sv, blk::Ancient_Greek_Musical_Notation },
		{ "ancientgreeknumbers"sv, blk::Ancient_Greek_Numbers }, { "ancientsymbols"sv, blk::Ancient_Symbols }, { "arabic"sv, blk::Arabic },
		{ "arabicextendeda"sv, blk::Arabic_Extended_A }, { "arabicextendedb"sv, blk::Arabic_Extended_B },
		{ "arabicextendedc"sv, blk::Arabic_Extended_C }, { "arabicmathematicalalphabeticsymbols"sv, blk::Arabic_Mathematical_Alphabetic_Symbols },
		{ "arabicpresentationformsa"sv, blk::Arabic_Presentation_Forms_A }, { "arabicpresentationformsb"sv, blk::Arabic_Presentation_Forms_B },
		{ "arabicsupplement"sv, blk::Arabic_Supplement }, { "armenian"sv, blk::Armenian }, { "arrows"sv, blk::Arrows },
		{ "avestan"sv, blk::Avestan }, { "balinese"sv, blk::Balinese }, { "bamum"sv, blk::Bamum }, { "bamumsupplement"sv, blk::Bamum_Supplement },
		{ "basiclatin"sv, blk::Basic_Latin }, { "bassavah"sv, blk::Bassa_Vah }, { "batak"sv, blk::Batak }, { "bengali"sv, blk::Bengali },
		{ "bhaiksuki"sv, blk::Bhaiksuki }, { "blockelements"sv, blk::Block_Elements }, { "bopomofo"sv, blk::Bopomofo },
		{ "bopomofoextended"sv, blk::Bopomofo_Extended }, { "boxdrawing"sv, blk::Box_Drawing }, { "brahmi"sv, blk::Brahmi },
		{ "braillepatterns"sv, blk::Braille_Patterns }, { "buginese"sv, blk::Buginese }, { "buhid"sv, blk::Buhid },
		{ "byzantinemusicalsymbols"sv, blk::Byzantine_Musical_Symbols }, { "carian"sv, blk::Carian },
		{ "caucasianalbanian"sv, blk::Caucasian_Albanian }, { "chakma"sv, blk::Chakma }, { "cham"sv, blk::Cham }, { "cherokee"sv, blk::Cherokee },
		{ "cherokeesupplement"sv, blk::Cherokee_Supplement }, { "chesssymbols"sv, blk::Chess_Symbols }, { "chorasmian"sv, blk::Chorasmian },
		{ "cjkcompatibility"sv, blk::CJK_Compatibility }, { "cjkcompatibilityforms"sv, blk::CJK_Compatibility_Forms },
		{ "cjkcompatibilityideographs"sv, blk::CJK_Compatibility_Ideographs },
		{ "cjkcompatibilityideographssupplement"sv, blk::CJK_Compatibility_Ideographs_Supplement },
		{ "cjkradicalssupplement"sv, blk::CJK_Radicals_Supplement }, { "cjkstrokes"sv, blk::CJK_Strokes },
		{ "cjksymbolsandpunctuation"sv, blk::CJK_Symbols_and_Punctuation }, { "cjkunifiedideographs"sv, blk::CJK_Unified_Ideographs },
		{ "cjkunifiedideographsextensiona"sv, blk::CJK_Unified_Ideographs_Extension_A },
		{ "cjkunifiedideographsextensionb"sv, blk::CJK_Unified_Ideographs_Extension_B },
		{ "cjkunifiedideographsextensionc"sv, blk::CJK_Unified_Ideographs_Extension_C },
		{ "cjkunifiedideographsextensiond"sv, blk::CJK_Unified_Ideographs_Extension_D },
		{ "cjkunifiedideographsextensione"sv, blk::CJK_Unified_Ideographs_Extension_E },
		{ "cjkunifiedideographsextensionf"sv, blk::CJK_Unified_Ideographs_Extension_F },
		{ "cjkunifiedideographsextensiong"sv, blk::CJK_Unified_Ideographs_Extension_G },
		{ "cjkunifiedideographsextensionh"sv, blk::CJK_Unified_Ideographs_Extension_H },
		{ "cjkunifiedideographsextensioni"sv, blk::CJK_Unified_Ideographs_Extension_I },
		{ "combiningdiacriticalmarks"sv, blk::Combining_Diacritical_Marks },
		{ "combiningdiacriticalmarksextended"sv, blk::Combining_Diacritical_Marks_Extended },
		{ "combiningdiacriticalmarksforsymbols"sv, blk::Combining_Diacritical_Marks_for_Symbols },
		{ "combiningdiacriticalmarkssupplement"sv, blk::Combining_Diacritical_Marks_Supplement },
		{ "combininghalfmarks"sv, blk::Combining_Half_Marks }, { "commonindicnumberforms"sv, blk::Common_Indic_Number_Forms },
		{ "controlpictures"sv, blk::Control_Pictures }, { "coptic"sv, blk::Coptic }, { "copticepactnumbers"sv, blk::Coptic_Epact_Numbers },
		{ "countingrodnumerals"sv, blk::Counting_Rod_Numerals }, { "cuneiform"sv, blk::Cuneiform },
		{ "cuneiformnumbersandpunctuation"sv, blk::Cuneiform_Numbers_and_Punctuation }, { "currencysymbols"sv, blk::Currency_Symbols },
		{ "cypriotsyllabary"sv, blk::Cypriot_Syllabary }, { "cyprominoan"sv, blk::Cypro_Minoan }, { "cyrillic"sv, blk::Cyrillic },
		{ "cyrillicextendeda"sv, blk::Cyrillic_Extended_A }, { "cyrillicextendedb"sv, blk::Cyrillic_Extended_B },
		{ "cyrillicextendedc"sv, blk::Cyrillic_Extended_C }, { "cyrillicextendedd"sv, blk::Cyrillic_Extended_D },
		{ "cyrillicsupplement"sv, blk::Cyrillic_Supplement }, { "deseret"sv, blk::Deseret }, { "devanagari"sv, blk::Devanagari },
		{ "devanagariextended"sv, blk::Devanagari_Extended }, { "devanagariextendeda"sv, blk::Devanagari_Extended_A },
		{ "dingbats"sv, blk::Dingbats }, { "divesakuru"sv, blk::Dives_Akuru }, { "dogra"sv, blk::Dogra }, { "dominotiles"sv, blk::Domino_Tiles },
		{ "duployan"sv, blk::Duployan }, { "earlydynasticcuneiform"sv, blk::Early_Dynastic_Cuneiform },
		{ "egyptianhieroglyphformatcontrols"sv, blk::Egyptian_Hieroglyph_Format_Controls }, { "egyptianhieroglyphs"sv, blk::Egyptian_Hieroglyphs },
		{ "elbasan"sv, blk::Elbasan }, { "elymaic"sv, blk::Elymaic }, { "emoticons"sv, blk::Emoticons },
		{ "enclosedalphanumerics"sv, blk::Enclosed_Alphanumerics }, { "enclosedalphanumericsupplement"sv, blk::Enclosed_Alphanumeric_Supplement },
		{ "enclosedcjklettersandmonths"sv, blk::Enclosed_CJK_Letters_and_Months },
		{ "enclosedideographicsupplement"sv, blk::Enclosed_Ideographic_Supplement }, { "ethiopic"sv, blk::Ethiopic },
		{ "ethiopicextended"sv, blk::Ethiopic_Extended }, { "ethiopicextendeda"sv, blk::Ethiopic_Extended_A },
		{ "ethiopicextendedb"sv, blk::Ethiopic_Extended_B }, { "ethiopicsupplement"sv, blk::Ethiopic_Supplement },
		{ "generalpunctuation"sv, blk::General_Punctuation }, { "geometricshapes"sv, blk::Geometric_Shapes },
		{ "geometricshapesextended"sv, blk::Geometric_Shapes_Extended }, { "georgian"sv, blk::Georgian },
		{ "georgianextended"sv, blk::Georgian_Extended }, { "georgiansupplement"sv, blk::Georgian_Supplement },
		{ "glagolitic"sv, blk::Glagolitic }, { "glagoliticsupplement"sv, blk::Glagolitic_Supplement }, { "gothic"sv, blk::Gothic },
		{ "grantha"sv, blk::Grantha }, { "greekandcoptic"sv, blk::Greek_and_Coptic }, { "greekextended"sv, blk::Greek_Extended },
		{ "gujarati"sv, blk::Gujarati }, { "gunjalagondi"sv, blk::Gunjala_Gondi }, { "gurmukhi"sv, blk::Gurmukhi },
		{ "halfwidthandfullwidthforms"sv, blk::Halfwidth_and_Fullwidth_Forms }, { "hangulcompatibilityjamo"sv, blk::Hangul_Compatibility_Jamo },
		{ "hanguljamo"sv, blk::Hangul_Jamo }, { "hanguljamoextendeda"sv, blk::Hangul_Jamo_Extended_A },
		{ "hanguljamoextendedb"sv, blk::Hangul_Jamo_Extended_B }, { "hangulsyllables"sv, blk::Hangul_Syllables },
		{ "hanifirohingya"sv, blk::Hanifi_Rohingya }, { "hanunoo"sv, blk::Hanunoo }, { "hatran"sv, blk::Hatran }, { "hebrew"sv, blk::Hebrew },
		{ "highprivateusesurrogates"sv, blk::High_Private_Use_Surrogates }, { "highsurrogates"sv, blk::High_Surrogates },
		{ "hiragana"sv, blk::Hiragana }, { "ideographicdescriptioncharacters"sv, blk::Ideographic_Description_Characters },
		{ "ideographicsymbolsandpunctuation"sv, blk::Ideographic_Symbols_and_Punctuation }, { "imperialaramaic"sv, blk::Imperial_Aramaic },
		{ "indicsiyaqnumbers"sv, blk::Indic_Siyaq_Numbers }, { "inscriptionalpahlavi"sv, blk::Inscriptional_Pahlavi },
		{ "inscriptionalparthian"sv, blk::Inscriptional_Parthian }, { "ipaextensions"sv, blk::IPA_Extensions }, { "javanese"sv, blk::Javanese },
		{ "kaithi"sv, blk::Kaithi }, { "kaktoviknumerals"sv, blk::Kaktovik_Numerals }, { "kanaextendeda"sv, blk::Kana_Extended_A },
		{ "kanaextendedb"sv, blk::Kana_Extended_B }, { "kanasupplement"sv, blk::Kana_Supplement }, { "kanbun"sv, blk::Kanbun },
		{ "kangxiradicals"sv, blk::Kangxi_Radicals }, { "kannada"sv, blk::Kannada }, { "katakana"sv, blk::Katakana },
		{ "katakanaphoneticextensions"sv, blk::Katakana_Phonetic_Extensions }, { "kawi"sv, blk::Kawi }, { "kayahli"sv, blk::Kayah_Li },
		{ "kharoshthi"sv, blk::Kharoshthi }, { "khitansmallscript"sv, blk::Khitan_Small_Script }, { "khmer"sv, blk::Khmer },
		{ "khmersymbols"sv, blk::Khmer_Symbols }, { "khojki"sv, blk::Khojki }, { "khudawadi"sv, blk::Khudawadi }, { "lao"sv, blk::Lao },
		{ "latin1supplement"sv, blk::Latin_1_Supplement }, { "latinextendeda"sv, blk::Latin_Extended_A },
		{ "latinextendedadditional"sv, blk::Latin_Extended_Additional }, { "latinextendedb"sv, blk::Latin_Extended_B },
		{ "latinextendedc"sv, blk::Latin_Extended_C }, { "latinextendedd"sv, blk::Latin_Extended_D },
		{ "latinextendede"sv, blk::Latin_Extended_E }, { "latinextendedf"sv, blk::Latin_Extended_F },
		{ "latinextendedg"sv, blk::Latin_Extended_G }, { "lepcha"sv, blk::Lepcha }, { "letterlikesymbols"sv, blk::Letterlike_Symbols },
		{ "limbu"sv, blk::Limbu }, { "lineara"sv, blk::Linear_A }, { "linearbideograms"sv, blk::Linear_B_Ideograms },
		{ "linearbsyllabary"sv, blk::Linear_B_Syllabary }, { "lisu"sv, blk::Lisu }, { "lisusupplement"sv, blk::Lisu_Supplement },
		{ "lowsurrogates"sv, blk::Low_Surrogates }, { "lycian"sv, blk::Lycian }, { "lydian"sv, blk::Lydian }, { "mahajani"sv, blk::Mahajani },
		{ "mahjongtiles"sv, blk::Mahjong_Tiles }, { "makasar"sv, blk::Makasar }, { "malayalam"sv, blk::Malayalam }, { "mandaic"sv, blk::Mandaic },
		{ "manichaean"sv, blk::Manichaean }, { "marchen"sv, blk::Marchen }, { "masaramgondi"sv, blk::Masaram_Gondi },
		{ "mathematicalalphanumericsymbols"sv, blk::Mathematical_Alphanumeric_Symbols },
		{ "mathematicaloperators"sv, blk::Mathematical_Operators }, { "mayannumerals"sv, blk::Mayan_Numerals },
		{ "medefaidrin"sv, blk::Medefaidrin }, { "meeteimayek"sv, blk::Meetei_Mayek }, { "meeteimayekextensions"sv, blk::Meetei_Mayek_Extensions },
		{ "mendekikakui"sv, blk::Mende_Kikakui }, { "meroiticcursive"sv, blk::Meroitic_Cursive },
		{ "meroitichieroglyphs"sv, blk::Meroitic_Hieroglyphs }, { "miao"sv, blk::Miao },
		{ "miscellaneousmathematicalsymbolsa"sv, blk::Miscellaneous_Mathematical_Symbols_A },
		{ "miscellaneousmathematicalsymbolsb"sv, blk::Miscellaneous_Mathematical_Symbols_B },
		{ "miscellaneoussymbols"sv, blk::Miscellaneous_Symbols }, { "miscellaneoussymbolsandarrows"sv, blk::Miscellaneous_Symbols_and_Arrows },
		{ "miscellaneoussymbolsandpictographs"sv, blk::Miscellaneous_Symbols_and_Pictographs },
		{ "miscellaneoustechnical"sv, blk::Miscellaneous_Technical }, { "modi"sv, blk::Modi },
		{ "modifiertoneletters"sv, blk::Modifier_Tone_Letters }, { "mongolian"sv, blk::Mongolian },
		{ "mongoliansupplement"sv, blk::Mongolian_Supplement }, { "mro"sv, blk::Mro }, { "multani"sv, blk::Multani },
		{ "musicalsymbols"sv, blk::Musical_Symbols }, { "myanmar"sv, blk::Myanmar }, { "myanmarextendeda"sv, blk::Myanmar_Extended_A },
		{ "myanmarextendedb"sv, blk::Myanmar_Extended_B }, { "nabataean"sv, blk::Nabataean }, { "nagmundari"sv, blk::Nag_Mundari },
		{ "nandinagari"sv, blk::Nandinagari }, { "newa"sv, blk::Newa }, { "newtailue"sv, blk::New_Tai_Lue }, { "nko"sv, blk::NKo },
		{ "noblock"sv, blk::No_block }, { "numberforms"sv, blk::Number_Forms }, { "nushu"sv, blk::Nushu },
		{ "nyiakengpuachuehmong"sv, blk::Nyiakeng_Puachue_Hmong }, { "ogham"sv, blk::Ogham }, { "olchiki"sv, blk::Ol_Chiki },
		{ "oldhungarian"sv, blk::Old_Hungarian }, { "olditalic"sv, blk::Old_Italic }, { "oldnortharabian"sv, blk::Old_North_Arabian },
		{ "oldpermic"sv, blk::Old_Permic }, { "oldpersian"sv, blk::Old_Persian }, { "oldsogdian"sv, blk::Old_Sogdian },
		{ "oldsoutharabian"sv, blk::Old_South_Arabian }, { "oldturkic"sv, blk::Old_Turkic }, { "olduyghur"sv, blk::Old_Uyghur },
		{ "opticalcharacterrecognition"sv, blk::Optical_Character_Recognition }, { "oriya"sv, blk::Oriya },
		{ "ornamentaldingbats"sv, blk::Ornamental_Dingbats }, { "osage"sv, blk::Osage }, { "osmanya"sv, blk::Osmanya },
		{ "ottomansiyaqnumbers"sv, blk::Ottoman_Siyaq_Numbers }, { "pahawhhmong"sv, blk::Pahawh_Hmong }, { "palmyrene"sv, blk::Palmyrene },
		{ "paucinhau"sv, blk::Pau_Cin_Hau }, { "phagspa"sv, blk::Phags_pa }, { "phaistosdisc"sv, blk::Phaistos_Disc },
		{ "phoenician"sv, blk::Phoenician }, { "phoneticextensions"sv, blk::Phonetic_Extensions },
		{ "phoneticextensionssupplement"sv, blk::Phonetic_Extensions_Supplement }, { "playingcards"sv, blk::Playing_Cards },
		{ "privateusearea"sv, blk::Private_Use_Area }, { "psalterpahlavi"sv, blk::Psalter_Pahlavi }, { "rejang"sv, blk::Rejang },
		{ "ruminumeralsymbols"sv, blk::Rumi_Numeral_Symbols }, { "runic"sv, blk::Runic }, { "samaritan"sv, blk::Samaritan },
		{ "saurashtra"sv, blk::Saurashtra }, { "sharada"sv, blk::Sharada }, { "shavian"sv, blk::Shavian },
		{ "shorthandformatcontrols"sv, blk::Shorthand_Format_Controls }, { "siddham"sv, blk::Siddham }, { "sinhala"sv, blk::Sinhala },
		{ "sinhalaarchaicnumbers"sv, blk::Sinhala_Archaic_Numbers }, { "smallformvariants"sv, blk::Small_Form_Variants },
		{ "smallkanaextension"sv, blk::Small_Kana_Extension }, { "sogdian"sv, blk::Sogdian }, { "sorasompeng"sv, blk::Sora_Sompeng },
		{ "soyombo"sv, blk::Soyombo }, { "spacingmodifierletters"sv, blk::Spacing_Modifier_Letters }, { "specials"sv, blk::Specials },
		{ "sundanese"sv, blk::Sundanese }, { "sundanesesupplement"sv, blk::Sundanese_Supplement },
		{ "superscriptsandsubscripts"sv, blk::Superscripts_and_Subscripts }, { "supplementalarrowsa"sv, blk::Supplemental_Arrows_A },
		{ "supplementalarrowsb"sv, blk::Supplemental_Arrows_B }, { "supplementalarrowsc"sv, blk::Supplemental_Arrows_C },
		{ "supplementalmathematicaloperators"sv, blk::Supplemental_Mathematical_Operators },
		{ "supplementalpunctuation"sv, blk::Supplemental_Punctuation },
		{ "supplementalsymbolsandpictographs"sv, blk::Supplemental_Symbols_and_Pictographs },
		{ "supplementaryprivateuseareaa"sv, blk::Supplementary_Private_Use_Area_A },
		{ "supplementaryprivateuseareab"sv, blk::Supplementary_Private_Use_Area_B }, { "suttonsignwriting"sv, blk::Sutton_SignWriting },
		{ "sylotinagri"sv, blk::Syloti_Nagri }, { "symbolsandpictographsextendeda"sv, blk::Symbols_and_Pictographs_Extended_A },
		{ "symbolsforlegacycomputing"sv, blk::Symbols_for_Legacy_Computing }, { "syriac"sv, blk::Syriac },
		{ "syriacsupplement"sv, blk::Syriac_Supplement }, { "tagalog"sv, blk::Tagalog }, { "tagbanwa"sv, blk::Tagbanwa }, { "tags"sv, blk::Tags },
		{ "taile"sv, blk::Tai_Le }, { "taitham"sv, blk::Tai_Tham }, { "taiviet"sv, blk::Tai_Viet },
		{ "taixuanjingsymbols"sv, blk::Tai_Xuan_Jing_Symbols }, { "takri"sv, blk::Takri }, { "tamil"sv, blk::Tamil },
		{ "tamilsupplement"sv, blk::Tamil_Supplement }, { "tangsa"sv, blk::Tangsa }, { "tangut"sv, blk::Tangut },
		{ "tangutcomponents"sv, blk::Tangut_Components }, { "tangutsupplement"sv, blk::Tangut_Supplement }, { "telugu"sv, blk::Telugu },
		{ "thaana"sv, blk::Thaana }, { "thai"sv, blk::Thai }, { "tibetan"sv, blk::Tibetan }, { "tifinagh"sv, blk::Tifinagh },
		{ "tirhuta"sv, blk::Tirhuta }, { "toto"sv, blk::Toto }, { "transportandmapsymbols"sv, blk::Transport_and_Map_Symbols },
		{ "ugaritic"sv, blk::Ugaritic }, { "unifiedcanadianaboriginalsyllabics"sv, blk::Unified_Canadian_Aboriginal_Syllabics },
		{ "unifiedcanadianaboriginalsyllabicsextended"sv, blk::Unified_Canadian_Aboriginal_Syllabics_Extended },
		{ "unifiedcanadianaboriginalsyllabicsextendeda"sv, blk::Unified_Canadian_Aboriginal_Syllabics_Extended_A }, { "vai"sv, blk::Vai },
		{ "variationselectors"sv, blk::Variation_Selectors }, { "variationselectorssupplement"sv, blk::Variation_Selectors_Supplement },
		{ "vedicextensions"sv, blk::Vedic_Extensions }, { "verticalforms"sv, blk::Vertical_Forms }, { "vithkuqi"sv, blk::Vithkuqi },
		{ "wancho"sv, blk::Wancho }, { "warangciti"sv, blk::Warang_Citi }, { "yezidi"sv, blk::Yezidi },
		{ "yijinghexagramsymbols"sv, blk::Yijing_Hexagram_Symbols }, { "yiradicals"sv, blk::Yi_Radicals }, { "yisyllables"sv, blk::Yi_Syllables },
		{ "zanabazarsquare"sv, blk::Zanabazar_Square }, { "znamennymusicalnotation"sv, blk::Znamenny_Musical_Notation }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<blktype>{static_cast<blktype>(c->second)} : std::nullopt;
}

// Convert from text to agetype property
inline std::optional<agetype> stoagetype(std::string_view s)
{
	using namespace std::string_view_literals;
	using at = agetype;

	static constexpr std::array<std::pair<std::string_view, agetype>, 27> labels =
	{ {
		{ "100"sv, at::v10_0 }, { "11"sv, at::v1_1 }, { "110"sv, at::v11_0 }, { "120"sv, at::v12_0 }, { "121"sv, at::v12_1 },
		{ "130"sv, at::v13_0 }, { "140"sv, at::v14_0 }, { "150"sv, at::v15_0 }, { "151"sv, at::v15_1 }, { "20"sv, at::v2_0 },
		{ "21"sv, at::v2_1 }, { "30"sv, at::v3_0 }, { "31"sv, at::v3_1 }, { "32"sv, at::v3_2 }, { "40"sv, at::v4_0 },
		{ "41"sv, at::v4_1 }, { "50"sv, at::v5_0 }, { "51"sv, at::v5_1 }, { "52"sv, at::v5_2 }, { "60"sv, at::v6_0 },
		{ "61"sv, at::v6_1 }, { "62"sv, at::v6_2 }, { "63"sv, at::v6_3 }, { "70"sv, at::v7_0 }, { "80"sv, at::v8_0 },
		{ "90"sv, at::v9_0 }, { "unassigned"sv, at::Unassigned }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<agetype>{static_cast<agetype>(c->second)} : std::nullopt;
}

// Convert from text to eawtype property
inline std::optional<eawtype> stoeawtype(std::string_view s)
{
	using namespace std::string_view_literals;
	using eaw = eawtype;

	static constexpr std::array<std::pair<std::string_view, eawtype>, 6> labels =
	{ {
		{ "a"sv, eaw::A }, { "f"sv, eaw::F }, { "h"sv, eaw::H }, { "n"sv, eaw::N }, { "na"sv, eaw::Na }, { "w"sv, eaw::W }
	} };

	auto l = detail::normalize_property_label(s);
	auto c = std::lower_bound(labels.begin(), labels.end(), l, [](auto const& x, auto const& y) { return x.first < y; });
	return c != labels.end() && c->first == l ? std::optional<eawtype>{static_cast<eawtype>(c->second)} : std::nullopt;
}

namespace detail {

template <class InputIt, class OutputIt>
void run_length_decode(InputIt first, InputIt last, OutputIt dest)
{
	using value_type = typename std::iterator_traits<InputIt>::value_type;
	constexpr auto ilseqcode = (std::numeric_limits<value_type>::max)();
	constexpr auto seqmask = static_cast<value_type>(0x03ull << (std::numeric_limits<value_type>::digits - 2));
	while (first != last) {
		if (auto const lead = *first++; lead == ilseqcode) {
			auto const count = static_cast<std::size_t>(*first++);
			auto const head = *first++;
			auto const tail = *first++;
			for (std::size_t i = 0; i < count; ++i) {
				if ((head & seqmask) == seqmask) {
					dest = std::fill_n(dest, static_cast<std::size_t>(head & ~seqmask) + 1, tail);
				} else {
					*dest++ = head;
					*dest++ = tail;
				}
			}
		} else if ((lead & seqmask) == seqmask) {
			dest = std::fill_n(dest, static_cast<std::size_t>(lead & ~seqmask) + 1, *first++);
		} else {
			*dest++ = lead;
		}
	}
}

} // namespace detail

inline std::int_least32_t record::case_mapping(std::size_t index) noexcept
{
	static constexpr std::array<std::int_least32_t, 188> casemappings =
	{
		0, 32, -32, 775, 743, 7615, 121, 1, -1, -121, -268, -300, 195, 210, 206, 205, 79, 202, 203, 207, 97, 211, 209, 163, 213,
		130, 214, 218, 217, 219, 56, 2, -2, -79, -97, -56, -130, 10795, -163, 10792, 10815, -195, 69, 71, 10783, 10780, 10782, -210,
		-206, -205, -202, -203, 42319, 42315, -207, 42280, 42308, -209, -211, 10743, 42305, 10749, -213, -214, 10727, -218, 42307,
		42282, -69, -217, -71, -219, 42261, 42258, 116, 84, 38, 37, 64, 63, -38, -37, -31, -64, -63, 8, -30, -62, -25, -57, -15,
		-47, -22, -54, -8, -86, -48, -80, 7, -116, -60, -96, -7, 80, 15, 48, 7264, 3008, 38864, -6222, -6254, -6221, -6253, -6212,
		-6244, -6210, -6242, -6211, -6243, -6204, -6236, -6180, -6181, 35267, 35266, -3008, 35332, 3814, 35384, -58, -59, -7615,
		74, 86, 100, 128, 112, 126, -74, -9, -7173, -7205, -7235, -100, -7219, -112, -128, -126, -7517, -8383, -8262, 28, -28, 16,
		-16, 26, -26, -10743, -3814, -10727, -10795, -10792, -10780, -10749, -10783, -10782, -10815, -7264, -35332, -42280, -42308,
		-42319, -42315, -42305, -42258, -42282, -42261, 928, -42307, -35384, -928, -38864, 40, -40, 39, -39, 34, -34
	};

	return casemappings[index];
}

inline std::unique_ptr<record::raw_record_table> record::decompress_table()
{
	using detail::run_length_decode;
	using lug::detail::make_member_accessor;

	static constexpr std::array<std::uint_least16_t, 426> rlestage1 =
	{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
		33, 34, 35, 36, 37, 38, 39, 40, 49154, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
		62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 49153, 78, 79, 80, 49153, 79, 81, 82, 83, 84, 85, 86, 87,
		88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 49202, 99, 100, 49314, 101, 102, 103, 49159, 104, 105, 49153, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 49238, 119, 120, 49167, 121, 49201, 122, 49153, 123, 124, 125, 126, 127,
		128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 49153, 148, 149, 150,
		151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 140, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 140, 173,
		174, 140, 175, 176, 177, 178, 140, 179, 180, 181, 182, 183, 184, 185, 140, 186, 187, 188, 189, 140, 190, 191, 192, 49157,
		193, 194, 195, 196, 197, 198, 49171, 140, 199, 49159, 200, 201, 49182, 140, 49155, 202, 203, 49218, 140, 49155, 204, 205,
		206, 207, 208, 49155, 140, 209, 210, 211, 212, 49198, 213, 214, 49156, 213, 215, 49154, 216, 217, 218, 49219, 140, 219, 220,
		221, 222, 49153, 223, 224, 49169, 140, 225, 226, 49187, 140, 227, 228, 229, 230, 231, 232, 233, 234, 235, 140, 236, 237,
		238, 239, 240, 241, 242, 243, 49155, 244, 245, 246, 49159, 140, 247, 140, 248, 249, 250, 49153, 140, 251, 49154, 140, 252,
		49156, 140, 253, 254, 255, 256, 49156, 140, 257, 258, 259, 140, 260, 261, 49153, 140, 262, 263, 264, 265, 266, 140, 267,
		268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 49158, 140, 285, 49484, 286, 287, 49183,
		288, 289, 290, 291, 49195, 292, 293, 49208, 294, 295, 49155, 296, 297, 49170, 140, 49155, 298, 299, 49161, 140, 285, 49189,
		300, 301, 49183, 302, 303, 49590, 140, 285, 49662, 140, 285, 49662, 140, 285, 49662, 140, 285, 49662, 140, 285, 49662, 140,
		285, 49662, 140, 285, 49662, 140, 285, 49662, 140, 285, 49662, 140, 285, 49662, 140, 285, 304, 305, 306, 307, 49179, 305,
		49630, 140, 285, 49662, 308, 309, 49662, 308, 309
	};

	static constexpr std::array<std::uint_least16_t, 6765> rlestage2 =
	{
		0, 49159, 1, 2, 49155, 3, 49169, 1, 4, 5, 6, 7, 8, 49153, 7, 9, 10, 11, 7, 12, 13, 14, 15, 7, 49161, 16, 17, 13, 49154, 12,
		5, 7, 49157, 18, 49171, 19, 10, 7, 11, 20, 21, 22, 49157, 23, 49153, 24, 49153, 25, 49167, 24, 10, 12, 11, 12, 1, 49156,
		26, 27, 49177, 26, 28, 29, 49155, 30, 31, 29, 32, 31, 33, 34, 35, 36, 31, 32, 31, 35, 49153, 37, 32, 38, 29, 39, 32, 37,
		33, 40, 49154, 41, 29, 49174, 42, 35, 49158, 42, 43, 49174, 44, 35, 49158, 44, 45, 65535, 23, 46, 47, 46, 48, 49, 50, 65535,
		3, 46, 47, 51, 65535, 8, 46, 47, 52, 65535, 23, 46, 47, 53, 65535, 3, 46, 47, 54, 55, 56, 46, 47, 46, 47, 57, 46, 47, 49153,
		58, 46, 47, 51, 59, 60, 61, 46, 47, 58, 62, 63, 64, 65, 46, 47, 66, 51, 64, 67, 68, 69, 65535, 3, 46, 47, 70, 46, 47, 70,
		49153, 51, 46, 47, 70, 46, 47, 49153, 71, 46, 47, 46, 47, 72, 46, 47, 51, 73, 46, 47, 51, 74, 49155, 73, 75, 76, 77, 75,
		76, 77, 75, 76, 77, 65535, 8, 46, 47, 78, 65535, 9, 46, 47, 50, 75, 76, 77, 46, 47, 79, 80, 81, 82, 65535, 15, 46, 47, 65535,
		4, 81, 82, 83, 84, 65535, 9, 81, 82, 49154, 84, 49154, 85, 86, 87, 88, 89, 90, 49153, 91, 87, 92, 93, 94, 95, 96, 92, 96,
		97, 65535, 3, 96, 92, 98, 99, 100, 101, 102, 51, 49153, 103, 51, 104, 51, 105, 106, 49154, 51, 103, 107, 51, 108, 51, 109,
		110, 51, 111, 112, 110, 113, 114, 49153, 51, 112, 51, 115, 116, 49153, 51, 117, 49158, 51, 118, 49153, 51, 119, 51, 120,
		119, 49154, 51, 121, 119, 122, 49153, 123, 124, 49156, 51, 125, 51, 73, 49159, 51, 126, 127, 49161, 51, 49156, 128, 49153,
		84, 49153, 129, 130, 49157, 129, 49158, 131, 49153, 132, 49155, 32, 49161, 131, 49153, 133, 49164, 32, 134, 49156, 129, 49156,
		32, 49153, 135, 136, 134, 136, 49168, 137, 49220, 138, 139, 49160, 140, 141, 49159, 142, 49156, 143, 49154, 142, 49153, 138,
		140, 49164, 144, 145, 146, 145, 146, 131, 147, 145, 146, 49153, 148, 149, 49154, 150, 151, 152, 49155, 148, 147, 32, 153,
		154, 49154, 155, 148, 156, 148, 49153, 157, 158, 49168, 159, 148, 49160, 159, 160, 49154, 161, 158, 49168, 162, 163, 49160,
		162, 164, 49153, 165, 166, 167, 168, 169, 49153, 170, 171, 172, 173, 174, 175, 65535, 4, 176, 177, 65535, 7, 178, 179, 180,
		181, 182, 183, 184, 185, 186, 187, 188, 189, 187, 188, 190, 49154, 191, 192, 49163, 193, 192, 49153, 193, 49183, 194, 49183,
		195, 196, 49156, 197, 198, 197, 198, 49155, 197, 196, 49153, 197, 65535, 17, 199, 200, 201, 49153, 202, 49153, 203, 204,
		49153, 205, 206, 207, 208, 209, 208, 209, 65535, 24, 199, 200, 210, 199, 200, 199, 200, 206, 207, 199, 200, 206, 207, 199,
		200, 206, 207, 211, 65535, 14, 199, 200, 208, 209, 65535, 4, 199, 200, 212, 213, 199, 200, 65535, 3, 214, 215, 65535, 8,
		206, 207, 214, 215, 214, 215, 65535, 8, 216, 217, 218, 219, 220, 221, 65535, 4, 222, 223, 224, 49189, 225, 49153, 224, 226,
		49156, 227, 228, 229, 49189, 230, 231, 229, 232, 233, 49153, 224, 49153, 234, 235, 236, 49168, 237, 238, 49164, 237, 49161,
		239, 240, 49154, 239, 241, 239, 242, 49153, 239, 243, 244, 245, 246, 245, 49159, 236, 49178, 247, 49155, 236, 248, 49154,
		247, 242, 249, 49162, 236, 49155, 250, 251, 252, 49154, 253, 49153, 254, 255, 256, 257, 49153, 258, 49157, 259, 49156, 260,
		256, 261, 262, 263, 264, 265, 49177, 266, 49156, 267, 268, 49161, 266, 49159, 269, 49154, 270, 259, 271, 272, 49157, 273,
		274, 49161, 275, 49155, 276, 49153, 277, 278, 49153, 266, 279, 49219, 266, 49153, 280, 49156, 266, 280, 49166, 266, 280,
		49155, 266, 281, 266, 49158, 282, 283, 284, 49153, 285, 49155, 282, 49153, 286, 49153, 282, 284, 49154, 285, 282, 49153,
		287, 49161, 275, 49154, 280, 49153, 288, 287, 49154, 289, 49159, 290, 291, 290, 291, 292, 293, 294, 295, 49178, 294, 49154,
		296, 49167, 297, 49162, 298, 49153, 292, 49154, 296, 49181, 299, 49169, 267, 49189, 300, 49162, 301, 302, 49165, 303, 49161,
		304, 49184, 305, 49160, 306, 49153, 307, 308, 309, 310, 311, 312, 49153, 313, 314, 49153, 315, 49173, 316, 49153, 317, 49153,
		318, 319, 49160, 317, 319, 49154, 317, 319, 49155, 317, 320, 49153, 321, 49158, 322, 323, 322, 323, 49154, 322, 49153, 323,
		321, 49176, 324, 49154, 325, 49153, 326, 327, 326, 49162, 328, 49156, 292, 49175, 329, 330, 49157, 329, 331, 49153, 332,
		49157, 331, 49159, 333, 334, 335, 49162, 334, 49157, 335, 49153, 336, 329, 49159, 337, 49161, 338, 329, 339, 49160, 333,
		340, 49163, 341, 49153, 342, 343, 344, 49157, 345, 49157, 346, 49166, 345, 347, 348, 49153, 349, 350, 351, 49167, 352, 49188,
		353, 354, 355, 356, 352, 49154, 350, 49159, 349, 49155, 350, 357, 358, 355, 352, 49155, 359, 348, 49153, 354, 49159, 353,
		49153, 352, 49153, 349, 49153, 360, 49161, 361, 362, 363, 364, 49156, 365, 366, 49153, 367, 49153, 368, 369, 49153, 368,
		370, 371, 49153, 372, 373, 49159, 374, 49153, 373, 49153, 374, 49153, 373, 49153, 374, 49171, 375, 373, 49158, 375, 373,
		375, 49154, 373, 49155, 375, 49153, 373, 376, 377, 378, 49153, 372, 49155, 371, 49153, 373, 49153, 372, 49153, 373, 49153,
		372, 379, 380, 49159, 373, 378, 49155, 373, 49153, 375, 373, 375, 49153, 374, 49153, 371, 49153, 373, 49161, 381, 49153,
		375, 49153, 382, 49157, 383, 384, 385, 386, 387, 388, 373, 389, 390, 391, 392, 389, 49157, 393, 49155, 389, 49153, 393, 49153,
		389, 49173, 393, 389, 49158, 393, 389, 49153, 393, 389, 49153, 393, 389, 49153, 393, 49153, 389, 394, 389, 49154, 395, 49153,
		391, 49155, 389, 49153, 391, 49153, 389, 49153, 391, 396, 49154, 389, 397, 49158, 389, 49155, 393, 389, 393, 49158, 389,
		49161, 398, 49153, 391, 49154, 393, 397, 399, 49160, 389, 400, 49153, 401, 402, 400, 49158, 403, 404, 403, 400, 49154, 403,
		400, 49153, 403, 49171, 405, 400, 49158, 405, 400, 49153, 405, 400, 49156, 405, 49153, 400, 406, 403, 49154, 402, 49156,
		401, 400, 49153, 401, 402, 400, 49153, 402, 407, 49153, 400, 403, 49166, 400, 403, 404, 49153, 408, 49153, 400, 49161, 409,
		410, 411, 49158, 400, 412, 49154, 413, 49154, 414, 415, 416, 49153, 417, 415, 49159, 418, 49153, 415, 49153, 418, 49153,
		415, 49153, 418, 49171, 419, 415, 49158, 419, 415, 49153, 419, 415, 420, 49155, 419, 49153, 415, 421, 418, 422, 416, 417,
		49154, 416, 423, 49153, 415, 49153, 417, 49153, 415, 49153, 417, 424, 49158, 415, 425, 416, 422, 49155, 415, 49153, 419,
		415, 419, 49153, 418, 49153, 423, 49153, 415, 49161, 426, 427, 420, 49157, 428, 49159, 415, 49153, 429, 430, 431, 429, 49157,
		431, 49154, 429, 49154, 431, 429, 49155, 431, 49154, 429, 49153, 431, 429, 431, 429, 49153, 431, 49154, 429, 49153, 431,
		49154, 429, 49154, 431, 49154, 429, 49159, 431, 432, 49154, 431, 49155, 429, 433, 434, 430, 49153, 434, 49154, 429, 49154,
		434, 429, 49154, 434, 435, 49153, 429, 436, 49157, 429, 433, 49165, 429, 437, 49160, 438, 49154, 439, 49157, 440, 441, 440,
		49156, 429, 442, 49154, 443, 444, 49159, 445, 446, 49154, 445, 446, 49154, 445, 49171, 447, 446, 49161, 447, 448, 49156,
		447, 49153, 446, 449, 450, 49154, 451, 49155, 443, 446, 49154, 451, 446, 49154, 451, 452, 49158, 446, 49153, 453, 446, 49153,
		454, 455, 49153, 446, 456, 49153, 446, 49153, 445, 49153, 457, 49153, 446, 49161, 458, 49158, 446, 459, 49158, 460, 461,
		462, 463, 49153, 464, 465, 49159, 466, 467, 49154, 466, 467, 49174, 466, 467, 49161, 466, 467, 49156, 466, 49153, 467, 468,
		469, 464, 470, 49153, 464, 471, 49153, 464, 467, 470, 49153, 464, 467, 49153, 464, 470, 472, 49158, 467, 49153, 471, 49157,
		467, 473, 466, 467, 49153, 466, 49153, 474, 49153, 467, 49161, 475, 467, 49153, 476, 477, 49163, 467, 478, 479, 49153, 480,
		481, 49159, 482, 483, 49154, 482, 483, 49154, 482, 49171, 484, 485, 49167, 484, 485, 49153, 486, 487, 488, 49153, 480, 49154,
		489, 490, 483, 49154, 480, 483, 49154, 480, 491, 492, 493, 49155, 483, 49154, 494, 488, 49158, 495, 496, 49153, 482, 49153,
		490, 49153, 483, 49161, 497, 49157, 498, 49154, 495, 499, 49157, 487, 500, 501, 49153, 502, 500, 49169, 503, 49154, 500,
		49175, 503, 500, 49160, 503, 500, 503, 49153, 500, 49158, 503, 49154, 500, 504, 49155, 500, 505, 49153, 502, 49154, 506,
		500, 506, 500, 49158, 502, 505, 49157, 500, 49161, 507, 49153, 500, 49153, 502, 508, 49162, 500, 509, 49199, 510, 511, 510,
		512, 49155, 511, 49153, 513, 514, 49155, 509, 515, 49156, 516, 510, 517, 518, 49155, 519, 518, 511, 518, 520, 49161, 521,
		49153, 522, 49187, 509, 523, 49153, 524, 523, 524, 523, 525, 49153, 524, 525, 524, 523, 525, 524, 49157, 525, 49155, 524,
		525, 49158, 524, 525, 49154, 524, 523, 524, 523, 524, 49153, 525, 49153, 524, 525, 49155, 524, 526, 524, 527, 49155, 526,
		49153, 528, 529, 49153, 526, 524, 49153, 523, 49156, 530, 523, 531, 523, 49155, 532, 533, 526, 534, 523, 49161, 535, 49153,
		523, 49153, 524, 49153, 536, 49183, 523, 537, 49154, 538, 49155, 539, 540, 49155, 539, 49157, 540, 538, 539, 49154, 538,
		49153, 541, 49157, 538, 49161, 542, 49161, 543, 65535, 3, 538, 541, 544, 545, 544, 545, 49153, 546, 49159, 537, 547, 49184,
		537, 548, 49153, 549, 49155, 547, 49153, 550, 551, 550, 49153, 551, 552, 551, 552, 49155, 550, 551, 553, 550, 551, 49153,
		554, 555, 539, 49153, 541, 49155, 537, 556, 49154, 557, 49157, 551, 558, 551, 547, 49172, 551, 49154, 558, 49158, 551, 558,
		551, 49154, 558, 547, 49159, 559, 560, 49157, 559, 547, 561, 559, 49153, 562, 49154, 563, 49155, 564, 49153, 565, 49188,
		547, 49185, 566, 567, 49156, 566, 567, 49153, 566, 568, 569, 49155, 570, 569, 570, 49154, 571, 570, 572, 569, 573, 574, 49153,
		568, 49153, 571, 567, 49161, 575, 49153, 576, 49155, 577, 49157, 566, 49153, 569, 49153, 570, 49155, 567, 49154, 571, 567,
		568, 49153, 578, 49153, 567, 49153, 568, 49156, 578, 49154, 567, 49155, 571, 49164, 567, 571, 49153, 568, 49153, 571, 49157,
		578, 579, 567, 578, 49161, 580, 49153, 581, 582, 583, 49153, 584, 49189, 585, 586, 587, 49156, 586, 587, 49153, 586, 49190,
		588, 49153, 589, 49153, 590, 591, 592, 49154, 593, 49241, 594, 49156, 595, 596, 597, 49217, 598, 49156, 599, 49233, 598,
		49157, 599, 49158, 600, 601, 49214, 600, 601, 600, 602, 49155, 600, 49153, 602, 49158, 600, 602, 600, 602, 49155, 600, 49153,
		602, 49190, 600, 601, 600, 602, 49155, 600, 49153, 602, 49182, 600, 601, 600, 602, 49155, 600, 49153, 602, 49158, 600, 602,
		600, 602, 49155, 600, 49153, 602, 49158, 600, 601, 49158, 600, 602, 49174, 600, 601, 49182, 600, 601, 600, 602, 49155, 600,
		49153, 602, 49158, 600, 601, 49190, 600, 601, 49170, 600, 49153, 602, 49153, 603, 604, 605, 606, 607, 49155, 606, 49153,
		607, 49160, 608, 49162, 609, 49154, 602, 49167, 601, 49161, 610, 49157, 602, 49231, 611, 49156, 612, 613, 49153, 614, 49157,
		615, 49153, 614, 616, 49515, 617, 618, 619, 49159, 617, 49160, 620, 621, 49177, 622, 623, 624, 49154, 625, 49226, 626, 49154,
		627, 49154, 628, 49159, 629, 49158, 630, 49164, 631, 632, 49155, 631, 49153, 633, 634, 635, 49160, 636, 632, 49169, 637,
		49153, 638, 639, 49153, 640, 49160, 641, 49169, 642, 49153, 643, 49163, 644, 49164, 645, 646, 49154, 645, 646, 49153, 647,
		49163, 646, 49186, 648, 49153, 649, 49166, 648, 49153, 650, 651, 49158, 652, 49159, 651, 652, 49153, 651, 49160, 653, 654,
		653, 49153, 655, 656, 657, 49153, 658, 656, 659, 648, 660, 49153, 661, 49161, 662, 49157, 661, 49161, 663, 49157, 661, 49153,
		664, 665, 666, 667, 665, 668, 664, 667, 669, 670, 49154, 671, 672, 673, 49161, 674, 49157, 675, 49186, 676, 677, 49203, 676,
		678, 49158, 675, 49156, 676, 49153, 679, 49185, 676, 680, 681, 49156, 675, 49221, 620, 49161, 148, 49180, 682, 49153, 683,
		684, 49154, 685, 49155, 686, 49153, 685, 49154, 686, 49155, 684, 49153, 686, 685, 49157, 686, 49154, 687, 49155, 684, 688,
		49154, 684, 49153, 689, 49161, 690, 49181, 691, 49153, 148, 49156, 691, 49162, 148, 49193, 692, 49153, 693, 49155, 148, 49156,
		692, 49154, 694, 49153, 692, 694, 49166, 692, 49157, 148, 49161, 695, 696, 49154, 148, 49153, 697, 49183, 698, 49174, 699,
		49153, 700, 49153, 701, 702, 49153, 703, 49153, 704, 49204, 705, 706, 707, 706, 49158, 707, 148, 708, 706, 707, 49153, 706,
		49159, 707, 49157, 706, 49153, 707, 49159, 709, 49153, 148, 709, 49161, 710, 49157, 148, 49161, 710, 49157, 148, 49158, 711,
		712, 49155, 713, 49153, 711, 49153, 148, 49165, 714, 715, 49153, 716, 49162, 717, 49154, 718, 49200, 148, 49155, 719, 720,
		49198, 721, 722, 723, 49156, 719, 720, 719, 49156, 720, 719, 720, 724, 49158, 721, 725, 49154, 726, 49161, 727, 49153, 728,
		729, 730, 49153, 728, 729, 49161, 731, 49160, 722, 49160, 731, 49153, 732, 726, 49153, 733, 734, 49181, 735, 734, 49155,
		733, 49153, 734, 49153, 733, 736, 737, 49153, 738, 49153, 735, 49161, 739, 49157, 740, 49189, 741, 742, 743, 49153, 744,
		49154, 743, 744, 743, 49154, 744, 49153, 745, 49159, 746, 49155, 747, 49187, 748, 49159, 749, 49159, 750, 49153, 749, 751,
		752, 49154, 753, 49153, 754, 49154, 755, 49161, 756, 49154, 753, 49154, 748, 49161, 757, 49181, 758, 49154, 759, 760, 49153,
		759, 49153, 761, 762, 763, 764, 49153, 765, 766, 767, 768, 769, 49158, 770, 49194, 771, 49153, 586, 49154, 771, 49159, 772,
		49159, 773, 49154, 774, 775, 49164, 774, 776, 49158, 774, 49155, 777, 774, 49156, 777, 778, 779, 49153, 778, 780, 49153,
		714, 781, 49156, 148, 49189, 84, 49156, 782, 783, 49200, 784, 49156, 785, 786, 49154, 784, 49156, 785, 84, 49163, 85, 787,
		788, 49154, 85, 789, 49167, 85, 790, 49158, 85, 791, 49155, 85, 49160, 792, 793, 49154, 792, 793, 49173, 792, 794, 49155,
		143, 49158, 795, 49156, 796, 49174, 797, 49165, 798, 714, 49155, 799, 717, 800, 801, 774, 49153, 795, 65535, 22, 46, 47,
		46, 48, 65535, 52, 46, 47, 49155, 50, 802, 803, 49153, 804, 805, 804, 65535, 21, 46, 47, 46, 48, 65535, 23, 46, 47, 65535,
		3, 806, 807, 49159, 808, 49159, 809, 49157, 808, 49153, 148, 49157, 809, 49153, 148, 49159, 808, 49159, 809, 49159, 808,
		49159, 809, 49157, 808, 49153, 148, 49157, 809, 49153, 148, 65535, 4, 158, 808, 65535, 4, 148, 809, 49159, 808, 49159, 809,
		49153, 810, 49155, 811, 49153, 812, 49153, 813, 49153, 814, 49153, 815, 49153, 148, 49159, 816, 49159, 817, 49159, 816, 49159,
		817, 49159, 816, 49159, 817, 49153, 808, 49154, 816, 148, 158, 816, 49153, 809, 49153, 818, 819, 147, 820, 49154, 147, 49154,
		816, 148, 158, 816, 49155, 821, 819, 49154, 147, 49153, 808, 158, 822, 49153, 148, 49153, 158, 49153, 809, 49153, 823, 148,
		49154, 147, 49153, 808, 158, 824, 158, 182, 49153, 158, 49153, 809, 49153, 825, 826, 49154, 147, 49153, 148, 49154, 816,
		148, 158, 816, 49153, 827, 49153, 828, 819, 49153, 147, 148, 49162, 829, 830, 831, 832, 49153, 833, 49157, 834, 835, 29,
		836, 837, 838, 49153, 34, 40, 838, 34, 49155, 29, 839, 49153, 29, 839, 840, 841, 49156, 842, 843, 49153, 29, 49154, 835,
		49155, 29, 34, 40, 29, 49153, 844, 29, 845, 846, 49154, 29, 35, 847, 848, 849, 49153, 850, 49155, 851, 49155, 852, 853, 854,
		855, 49153, 856, 852, 49158, 856, 857, 858, 49154, 859, 860, 861, 49155, 862, 49157, 863, 37, 864, 49153, 148, 49157, 37,
		865, 866, 865, 867, 868, 869, 49161, 37, 865, 866, 865, 867, 868, 148, 49156, 792, 49159, 870, 49154, 148, 49162, 871, 872,
		873, 49154, 874, 49153, 875, 49155, 876, 49154, 877, 878, 879, 49154, 880, 881, 882, 883, 49166, 148, 49164, 884, 49155,
		885, 884, 49153, 886, 887, 49153, 888, 49155, 144, 889, 49155, 890, 797, 49166, 148, 49153, 891, 892, 49155, 891, 892, 49153,
		891, 893, 49154, 892, 49153, 893, 49154, 892, 893, 891, 892, 49153, 891, 894, 49156, 892, 49157, 891, 892, 891, 895, 891,
		892, 896, 897, 898, 49153, 892, 899, 893, 49153, 892, 900, 892, 893, 49155, 901, 902, 903, 904, 905, 906, 49153, 907, 49156,
		908, 907, 49153, 906, 49153, 909, 910, 908, 911, 912, 913, 914, 49154, 915, 49164, 41, 49167, 916, 49167, 917, 49154, 918,
		81, 92, 49155, 919, 915, 49153, 920, 49155, 148, 49156, 921, 49156, 922, 49153, 921, 49155, 922, 921, 49153, 922, 921, 49153,
		922, 921, 922, 923, 49156, 922, 921, 923, 49153, 922, 49155, 923, 49153, 922, 49155, 923, 49169, 922, 49153, 921, 49153,
		922, 921, 922, 921, 49158, 922, 923, 922, 49157, 923, 49153, 922, 49156, 923, 49160, 924, 49163, 925, 49153, 35, 926, 49155,
		35, 926, 49161, 35, 927, 49162, 35, 926, 49362, 35, 49165, 853, 31, 928, 49157, 31, 929, 930, 929, 930, 49171, 31, 49153,
		35, 49158, 31, 931, 932, 49231, 31, 928, 853, 49181, 928, 49176, 853, 49153, 933, 934, 933, 49174, 934, 935, 936, 49162,
		937, 49157, 938, 939, 49156, 940, 941, 49162, 942, 49158, 943, 49155, 944, 945, 49188, 31, 49153, 928, 49176, 946, 49162,
		31, 49172, 946, 49211, 41, 49177, 891, 49177, 947, 49177, 948, 41, 49171, 949, 950, 49301, 31, 49161, 934, 49153, 951, 49163,
		31, 49160, 951, 35, 49155, 31, 49156, 951, 35, 49155, 31, 49153, 951, 49153, 31, 49153, 951, 49154, 31, 49156, 951, 49165,
		31, 951, 31, 951, 49153, 31, 49157, 951, 49154, 31, 49159, 928, 49159, 853, 49156, 31, 49153, 951, 49164, 31, 49153, 935,
		49153, 934, 937, 928, 49189, 31, 951, 31, 951, 49180, 31, 49155, 951, 49160, 31, 49153, 951, 35, 49153, 928, 49163, 934,
		49153, 937, 49161, 934, 49159, 935, 49162, 937, 952, 49153, 941, 49153, 935, 49167, 937, 940, 49161, 952, 49154, 941, 49155,
		952, 49161, 941, 942, 49170, 941, 942, 941, 49155, 942, 49175, 941, 953, 49155, 954, 955, 49155, 954, 49153, 955, 49179,
		954, 955, 49186, 954, 955, 954, 955, 49155, 954, 49154, 955, 954, 956, 49158, 954, 49153, 955, 49158, 954, 65535, 7, 957,
		958, 49181, 959, 954, 49154, 955, 49175, 954, 955, 49165, 954, 955, 49156, 960, 961, 962, 49155, 938, 963, 964, 963, 49153,
		965, 49173, 853, 65535, 3, 966, 967, 968, 969, 968, 969, 49167, 853, 49279, 970, 49282, 853, 65535, 11, 966, 967, 49214,
		853, 966, 967, 966, 967, 49183, 853, 966, 967, 49153, 853, 49165, 935, 49157, 937, 49158, 940, 49156, 952, 49155, 940, 49163,
		952, 49172, 964, 49153, 952, 49157, 964, 49154, 943, 49156, 952, 49156, 941, 49177, 943, 49153, 946, 49183, 943, 946, 971,
		49185, 943, 49154, 972, 49163, 943, 973, 49159, 943, 945, 49176, 972, 49155, 974, 49166, 972, 973, 49198, 975, 976, 49198,
		977, 978, 96, 92, 979, 980, 981, 982, 983, 65535, 3, 96, 92, 984, 985, 986, 987, 804, 806, 807, 988, 96, 92, 988, 49155,
		804, 989, 990, 49153, 991, 65535, 50, 992, 993, 994, 49157, 995, 996, 997, 996, 997, 49154, 998, 999, 1000, 49156, 1001,
		49155, 1002, 1003, 49153, 1002, 49189, 1004, 586, 1005, 49156, 586, 1005, 49153, 586, 49205, 1006, 49153, 1007, 49158, 1008,
		1009, 1010, 49165, 1008, 1011, 49174, 601, 49160, 602, 49158, 601, 602, 49158, 601, 602, 49158, 601, 602, 49158, 601, 602,
		49158, 601, 602, 49158, 601, 602, 49158, 601, 602, 49158, 601, 602, 49183, 1012, 49153, 856, 1013, 1014, 1013, 1014, 49154,
		856, 1013, 1014, 856, 1013, 1014, 49160, 856, 1015, 49153, 1016, 1017, 1016, 1013, 1014, 49153, 1016, 1018, 1019, 65535,
		4, 1020, 1021, 49155, 1016, 1022, 1023, 1016, 1024, 49159, 1025, 49153, 1026, 1027, 49154, 1028, 1029, 1030, 1031, 49153,
		1032, 49156, 1033, 49153, 1034, 1035, 1034, 1035, 1036, 49153, 971, 1037, 49153, 1038, 65535, 4, 1039, 1040, 1041, 49185,
		946, 49177, 1042, 148, 49240, 1042, 49163, 148, 49365, 1042, 49177, 148, 49153, 1043, 49153, 1044, 49159, 1043, 49153, 1045,
		49153, 1046, 829, 1047, 844, 29, 891, 1048, 1049, 1050, 847, 848, 847, 848, 838, 1051, 838, 1051, 847, 848, 49153, 31, 65535,
		4, 847, 848, 834, 838, 49153, 1051, 31, 49160, 1050, 49155, 138, 49153, 1052, 834, 49156, 1053, 49153, 891, 49154, 1054,
		1055, 1056, 1057, 903, 891, 1058, 49235, 1059, 49153, 1060, 49153, 1058, 49153, 1061, 49153, 1062, 49153, 1063, 1060, 1064,
		49241, 1065, 1066, 1067, 49153, 1068, 1069, 49156, 1070, 49191, 1071, 1072, 1073, 1074, 148, 49202, 594, 596, 49193, 594,
		148, 49153, 1075, 49155, 1076, 49161, 1075, 49175, 1077, 49154, 1078, 49156, 1079, 49167, 911, 49171, 914, 49162, 148, 1045,
		49167, 1069, 49180, 1080, 49153, 1081, 148, 49161, 41, 49177, 891, 49155, 1082, 49159, 915, 904, 49166, 949, 49179, 1080,
		49153, 1081, 1083, 891, 49161, 41, 49190, 891, 49166, 949, 49163, 891, 49155, 904, 49198, 1084, 1085, 49239, 1084, 49182,
		891, 49155, 904, 49250, 891, 49153, 904, 49182, 891, 904, 49333, 1086, 49161, 1087, 49215, 904, 49317, 1088, 49173, 1089,
		49159, 1090, 49159, 1091, 1092, 49160, 1093, 49172, 1094, 49156, 1095, 49164, 1087, 49154, 1096, 49172, 1097, 1098, 49398,
		1097, 49154, 148, 49169, 1099, 49153, 1100, 49167, 1099, 1100, 49163, 1099, 1100, 49154, 1099, 1100, 1099, 49160, 148, 49191,
		1101, 49157, 1102, 1103, 1104, 49291, 1105, 1106, 1107, 49153, 1108, 49167, 1105, 49161, 1109, 49153, 1105, 49171, 1110,
		65535, 16, 216, 217, 220, 221, 65535, 6, 216, 217, 1111, 204, 49154, 1112, 1113, 49159, 1114, 49153, 204, 1113, 1115, 65535,
		12, 216, 217, 222, 223, 222, 223, 49153, 1116, 1117, 1114, 49221, 1118, 49161, 1119, 49153, 1120, 1121, 1122, 49154, 1123,
		1122, 49159, 1124, 49174, 1125, 49155, 1126, 49156, 1127, 49153, 1128, 65535, 7, 806, 807, 49153, 804, 65535, 31, 806, 807,
		990, 49159, 804, 806, 807, 806, 807, 1129, 65535, 5, 806, 807, 1127, 49153, 1130, 806, 807, 1131, 1132, 1133, 1134, 1135,
		1136, 1137, 1138, 1139, 65535, 5, 1140, 1141, 65535, 5, 1134, 1135, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
		1151, 1152, 1153, 1152, 1153, 1154, 1155, 65535, 3, 1156, 1157, 1158, 1159, 1156, 1157, 1160, 1161, 1162, 1163, 1164, 1163,
		1164, 49156, 148, 1158, 1159, 148, 1165, 148, 1165, 1158, 1159, 1158, 1159, 49175, 148, 49154, 1166, 1163, 1164, 1167, 49153,
		1168, 1132, 49156, 1169, 49153, 1170, 1171, 49154, 1170, 1172, 49155, 1170, 1171, 49174, 1170, 49153, 1173, 49153, 1171,
		1173, 49155, 1174, 1175, 49154, 148, 49157, 915, 49153, 1082, 877, 1082, 49157, 148, 49203, 1176, 49153, 1177, 49153, 1178,
		49159, 1179, 49153, 1180, 49201, 1181, 49167, 1180, 1182, 1183, 49159, 1184, 49153, 1185, 49161, 1186, 49157, 1184, 49169,
		1187, 49157, 1188, 49154, 1189, 1188, 1190, 1191, 1192, 1193, 49161, 1194, 49179, 1195, 49156, 1196, 49154, 1197, 1198, 1199,
		49174, 1200, 49162, 1201, 1202, 1203, 49162, 1204, 1205, 49180, 595, 49154, 148, 49154, 1206, 1207, 49198, 1208, 1209, 49153,
		1207, 49155, 1206, 49153, 1207, 49153, 1206, 49153, 1207, 1210, 49157, 1211, 1212, 49153, 1213, 49155, 1211, 1214, 1215,
		49161, 1216, 49155, 1214, 49153, 1211, 49156, 1217, 1218, 1219, 49160, 1217, 49161, 1220, 49156, 1217, 1221, 49192, 1222,
		49157, 1223, 49153, 1224, 49153, 1223, 49153, 1224, 49153, 1223, 49160, 1225, 49154, 1222, 1223, 49159, 1222, 1223, 1224,
		49153, 1225, 49161, 1226, 49153, 1225, 1227, 49154, 1228, 49167, 1229, 1230, 49157, 1229, 49154, 1231, 1229, 581, 1218, 1232,
		49153, 1217, 49199, 1233, 1234, 1233, 49154, 1234, 49153, 1235, 49153, 1234, 1235, 1233, 49153, 1235, 1233, 1234, 1236, 1237,
		1236, 1237, 49175, 148, 49153, 1233, 1238, 1239, 1240, 49162, 1241, 1242, 49153, 1243, 49153, 1242, 49153, 1244, 1241, 49153,
		1245, 1242, 1246, 49160, 148, 602, 49157, 1247, 49153, 602, 49157, 1247, 49153, 602, 49157, 1247, 49160, 602, 49158, 1247,
		602, 49158, 1247, 602, 49186, 1139, 1248, 49158, 1139, 1249, 49155, 1250, 49155, 1251, 1139, 1252, 49153, 1253, 1254, 1255,
		49153, 1256, 49155, 148, 49231, 1257, 49186, 1258, 49153, 1259, 1260, 49153, 1259, 1260, 49153, 1259, 1261, 1262, 1263, 49153,
		148, 49161, 1264, 49157, 148, 49315, 1265, 49163, 148, 49174, 595, 49155, 148, 49200, 595, 49155, 148, 49279, 1266, 49279,
		1267, 49293, 1268, 49153, 1088, 1268, 1088, 1268, 49153, 1088, 49161, 1268, 1088, 1268, 1088, 1268, 49153, 1088, 49153, 1268,
		49154, 1088, 49155, 1268, 49153, 1269, 49210, 1270, 49154, 1271, 49153, 148, 49257, 1272, 49189, 148, 49156, 802, 1273, 802,
		49163, 148, 49156, 1274, 49156, 148, 1275, 1276, 49161, 1277, 1278, 49164, 1277, 148, 49156, 1277, 148, 1277, 148, 49153,
		1277, 148, 49153, 1277, 148, 49161, 1277, 49249, 266, 49167, 1279, 330, 49167, 331, 49290, 266, 49157, 1280, 49369, 266,
		1281, 1282, 49167, 1283, 49215, 266, 49153, 331, 49205, 266, 49158, 331, 1283, 49183, 1284, 49161, 266, 49153, 1280, 1285,
		258, 49153, 1283, 49167, 1286, 49154, 1287, 1288, 49154, 1287, 1289, 1290, 1287, 49157, 148, 49155, 138, 49154, 796, 49158,
		714, 49153, 1291, 1292, 49153, 1293, 49153, 845, 65535, 6, 1294, 1295, 1296, 1297, 1296, 1297, 49153, 852, 1298, 1299, 49155,
		1292, 49154, 845, 49153, 151, 1300, 148, 151, 1301, 49153, 1302, 1293, 65535, 3, 1294, 1295, 49153, 1292, 1303, 1304, 1305,
		49154, 1304, 148, 1303, 871, 49153, 1292, 49155, 148, 1280, 266, 1280, 277, 1280, 331, 65535, 4, 1280, 266, 1280, 49277,
		266, 49153, 331, 1306, 148, 1302, 1307, 1292, 871, 49153, 1292, 1308, 1294, 1295, 1292, 1304, 151, 1293, 1300, 1292, 49161,
		1309, 1301, 151, 49154, 1304, 1302, 1292, 49157, 1310, 49171, 42, 1294, 1303, 1295, 1311, 845, 32, 49157, 1312, 49171, 44,
		1294, 1304, 1295, 1304, 1313, 1314, 1302, 1296, 1297, 151, 1315, 49161, 1316, 133, 49196, 1316, 49153, 1317, 596, 49181,
		594, 49154, 148, 49157, 594, 49153, 148, 49157, 594, 49153, 148, 49157, 594, 49153, 148, 49154, 594, 49154, 148, 49153, 871,
		1304, 32, 891, 49153, 871, 148, 891, 49155, 1304, 49153, 891, 148, 49160, 1318, 49154, 1319, 1320, 1321, 49153, 1322, 49163,
		1323, 148, 49177, 1323, 148, 49170, 1323, 148, 49153, 1323, 148, 49166, 1323, 49153, 148, 49165, 1323, 49185, 148, 49274,
		1323, 49156, 148, 49154, 1324, 49155, 148, 49196, 950, 49154, 148, 49160, 904, 49204, 1325, 49155, 1326, 49168, 1327, 1326,
		1328, 1329, 49153, 1330, 148, 49163, 914, 1331, 49154, 148, 1329, 49198, 148, 49196, 914, 797, 49281, 148, 49180, 1332, 49154,
		1333, 49200, 1334, 49166, 1335, 1336, 49178, 1337, 49155, 1001, 49182, 1338, 1339, 49155, 1340, 49160, 148, 49154, 1341,
		49168, 1342, 1343, 49159, 1342, 1343, 49156, 1344, 49189, 1345, 49156, 1346, 49156, 148, 49181, 1347, 1348, 1349, 49187,
		1350, 49155, 148, 49159, 1350, 1351, 49156, 1352, 49193, 148, 49189, 1353, 49153, 1354, 49189, 1355, 49153, 1356, 49199,
		1357, 49181, 1358, 49153, 1359, 49161, 1360, 49157, 1359, 49187, 1361, 49155, 1362, 49187, 1363, 49155, 1362, 49191, 1364,
		49159, 1365, 49203, 1366, 49162, 148, 1367, 49162, 1368, 1369, 49166, 1368, 1369, 49158, 1368, 1369, 49153, 1368, 1369, 49162,
		1370, 1369, 49166, 1370, 1369, 49158, 1370, 1369, 49153, 1370, 49154, 1369, 49215, 148, 49334, 1371, 49160, 148, 49173, 1371,
		49161, 148, 49159, 1371, 49175, 148, 1372, 49153, 1373, 49154, 1372, 148, 49193, 1372, 148, 49160, 1372, 49220, 148, 49157,
		1374, 49153, 148, 1374, 148, 49195, 1374, 148, 49153, 1374, 49154, 148, 1374, 49153, 148, 1374, 49173, 1375, 148, 1376, 49159,
		1377, 49174, 1378, 49153, 1379, 49158, 1380, 49182, 1381, 49159, 1382, 49160, 1383, 49199, 148, 49170, 1384, 1385, 49153,
		1384, 49156, 1385, 49156, 1386, 49173, 1387, 49155, 1388, 49153, 1389, 49154, 1390, 1391, 49177, 1392, 49156, 1393, 1394,
		49215, 148, 49183, 1395, 49175, 1396, 49155, 148, 49153, 1397, 49153, 1396, 49167, 1397, 49153, 148, 49197, 1397, 1398, 49154,
		1399, 1400, 49153, 1399, 49156, 1400, 1399, 1401, 1399, 1401, 49155, 1398, 1400, 49154, 1398, 1400, 49178, 1398, 49153, 1402,
		49153, 1400, 49154, 1403, 49155, 1400, 1404, 49159, 1405, 1406, 49158, 1400, 49157, 1407, 49153, 1408, 1407, 49158, 1400,
		49180, 1409, 49153, 1410, 1411, 49180, 1412, 49154, 1413, 49183, 148, 49159, 1414, 1415, 49179, 1414, 49153, 1416, 49155,
		1417, 49156, 1418, 49157, 1419, 1420, 49160, 1417, 49205, 1421, 49154, 1422, 1423, 49157, 1424, 49173, 1425, 49153, 148,
		49159, 1426, 49170, 1427, 49156, 148, 49159, 1428, 49169, 1429, 49158, 148, 49155, 1430, 49163, 148, 49158, 1431, 49231,
		148, 49224, 1432, 49206, 148, 49202, 1433, 49164, 148, 49202, 1434, 49158, 148, 49157, 1435, 49185, 1436, 49153, 1437, 49155,
		1438, 49159, 148, 49161, 1439, 49317, 148, 49182, 1440, 148, 49193, 1441, 1442, 49153, 1443, 1444, 49153, 1442, 49153, 1441,
		49165, 1442, 49212, 331, 49154, 1445, 49180, 1446, 49161, 1447, 1446, 49159, 148, 49173, 1448, 49162, 1449, 49155, 1450,
		49156, 1451, 49173, 1452, 49169, 1453, 49155, 1454, 49155, 1455, 49189, 148, 49172, 1456, 49158, 1457, 49171, 1458, 49174,
		1459, 49160, 1460, 1461, 1462, 1461, 49204, 1463, 49165, 1462, 1464, 49153, 1465, 49156, 1466, 49155, 1467, 49171, 1468,
		49161, 1469, 1470, 49153, 1471, 49153, 1472, 1471, 49160, 1467, 1473, 49153, 1474, 1475, 49196, 1476, 49154, 1475, 49155,
		1474, 49153, 1475, 1477, 1478, 49153, 1479, 1480, 49155, 1481, 1482, 49161, 1483, 1484, 49153, 1483, 49176, 1485, 49158,
		148, 49161, 1486, 49157, 148, 49154, 1487, 49187, 1488, 49156, 1489, 1490, 49157, 1489, 49153, 1491, 1492, 49161, 1493, 1494,
		49154, 1495, 1496, 49153, 1497, 1498, 49159, 1492, 49186, 1499, 1500, 49153, 1501, 1499, 49160, 1502, 49153, 1503, 1504,
		49199, 1505, 49154, 1504, 49160, 1503, 1504, 1506, 49155, 1505, 49153, 1507, 49153, 1508, 1509, 1510, 49153, 1511, 1512,
		1513, 1514, 49161, 1515, 1516, 1517, 1518, 1517, 49153, 1519, 500, 49171, 1520, 49162, 500, 49169, 1521, 1522, 49176, 1521,
		49154, 1523, 49154, 1524, 49153, 1523, 1524, 1525, 1526, 1524, 49153, 1527, 1528, 49153, 1527, 1529, 1530, 49153, 1531, 1532,
		49165, 1522, 49199, 148, 49158, 1533, 1534, 1533, 1534, 49155, 1533, 1534, 49166, 1533, 1534, 49161, 1533, 1535, 49157, 1534,
		49198, 1536, 1537, 49154, 1538, 49157, 1537, 1539, 1540, 49156, 1541, 49161, 1542, 49157, 1541, 1543, 1544, 49153, 1545,
		1546, 49159, 1547, 49153, 1546, 49153, 1547, 49153, 1546, 49173, 1547, 1546, 49158, 1547, 1546, 49153, 1547, 1546, 49156,
		1547, 1546, 1548, 1549, 1547, 1550, 1545, 1544, 49155, 1545, 49153, 1546, 49153, 1545, 49153, 1546, 49153, 1545, 1551, 49153,
		1546, 1552, 49157, 1546, 1550, 49156, 1546, 1553, 49155, 1547, 49153, 1545, 49153, 1546, 49158, 1549, 49154, 1546, 49156,
		1549, 49162, 1546, 49204, 1554, 49154, 1555, 49159, 1556, 49153, 1555, 1557, 49153, 1556, 1555, 1558, 49155, 1554, 49153,
		1559, 1560, 49153, 1561, 49161, 1562, 1563, 1560, 1564, 1561, 1565, 1566, 49153, 1567, 49181, 1564, 49199, 1568, 1569, 49153,
		1570, 49157, 1571, 1570, 1571, 49153, 1570, 1569, 1570, 49153, 1571, 1570, 1572, 1573, 49153, 1568, 1574, 1568, 49159, 1575,
		49161, 1576, 49157, 1575, 49183, 148, 49198, 1577, 1578, 49153, 1579, 49155, 1580, 49153, 1581, 49155, 1579, 49153, 1580,
		1579, 1582, 1583, 1584, 49153, 1585, 49153, 1586, 49154, 1587, 1585, 49165, 1588, 49155, 1589, 49153, 1590, 49185, 1581,
		49199, 1591, 49154, 1592, 49159, 1593, 49153, 1592, 1593, 1592, 1594, 1593, 49153, 1595, 1596, 1591, 49162, 1597, 49161,
		1598, 49157, 1597, 49164, 1599, 49170, 675, 49194, 1600, 1601, 1602, 1601, 49153, 1602, 49157, 1601, 1603, 1604, 1605, 1606,
		49157, 1607, 49161, 1608, 49157, 1607, 49199, 148, 49177, 1609, 1610, 49153, 1611, 49154, 1612, 49153, 1613, 49155, 1612,
		1613, 49155, 1612, 1614, 49155, 1611, 49161, 1615, 49153, 1616, 49154, 1617, 1618, 49158, 1619, 49160, 1611, 49199, 148,
		49195, 1620, 49154, 1621, 49160, 1622, 1621, 1623, 1624, 1625, 49171, 1626, 49231, 148, 49183, 1627, 49183, 1628, 49161,
		1629, 49160, 1630, 49163, 148, 1631, 49158, 1632, 49153, 148, 1632, 49153, 148, 49159, 1632, 148, 49153, 1632, 148, 49175,
		1632, 1633, 49156, 1634, 148, 49153, 1634, 49153, 148, 49153, 1635, 1636, 1637, 1632, 1634, 1632, 1634, 1638, 1639, 1640,
		1639, 49160, 148, 49161, 1641, 49221, 148, 49159, 1642, 49153, 1643, 49190, 1642, 49154, 1644, 49155, 1645, 49153, 1643,
		49153, 1645, 49155, 1644, 1646, 1642, 1647, 1642, 1644, 49178, 1643, 1648, 49161, 1649, 49191, 1648, 1650, 1651, 49155, 1649,
		1652, 1648, 49155, 1649, 49154, 1653, 49153, 1654, 49154, 1653, 1651, 49159, 148, 1655, 49157, 1656, 49153, 1657, 49154,
		1656, 49191, 1655, 49153, 1658, 49155, 1655, 49164, 1656, 1657, 1659, 1660, 1661, 49153, 1662, 1663, 49154, 1661, 49153,
		1664, 49164, 1665, 49167, 1666, 49208, 1667, 49158, 148, 49161, 1668, 49237, 1669, 49183, 148, 49160, 1670, 1671, 49188,
		1670, 1672, 49158, 1673, 1671, 49157, 1673, 1672, 1674, 1670, 49153, 1675, 1676, 49153, 1677, 49161, 1671, 49161, 1678, 49170,
		1679, 49154, 1671, 1680, 1681, 49181, 1682, 49153, 1683, 49173, 1684, 1683, 1685, 49158, 1684, 1685, 49153, 1684, 1685, 49153,
		1684, 49160, 1683, 49215, 148, 49158, 1686, 148, 49153, 1686, 148, 49189, 1686, 49157, 1687, 49154, 148, 1687, 148, 49153,
		1687, 148, 49154, 1687, 1688, 1687, 49153, 1689, 1686, 1687, 49159, 148, 49161, 1690, 49157, 148, 49157, 1691, 148, 49153,
		1691, 148, 49183, 1691, 49156, 1692, 148, 49153, 1693, 148, 49153, 1692, 1693, 1692, 1694, 1691, 49158, 148, 49161, 1695,
		49333, 148, 49170, 1696, 49153, 1697, 49153, 1698, 49153, 1699, 49158, 1700, 49153, 1701, 1702, 1703, 49164, 1702, 1704,
		49185, 1702, 49153, 1703, 49156, 1701, 49154, 1704, 49153, 1703, 1701, 1705, 1706, 49153, 1707, 49162, 1708, 49161, 1709,
		49157, 1704, 49231, 148, 1710, 49166, 1711, 49172, 1712, 49159, 1713, 49155, 1714, 49168, 1713, 49164, 429, 1715, 49390,
		1716, 49193, 1717, 1718, 49253, 1719, 49250, 1720, 49163, 1721, 1719, 49155, 1722, 1723, 49162, 1719, 49347, 1724, 49227,
		148, 49248, 1725, 49153, 1726, 49164, 1727, 49326, 1728, 1729, 49160, 1730, 49158, 1731, 1732, 49157, 1729, 49166, 1733,
		49193, 148, 49350, 1734, 49208, 148, 49336, 1735, 49158, 1124, 49182, 1736, 1737, 49161, 1738, 49155, 1737, 49153, 1739,
		49230, 1740, 1741, 49161, 1742, 49157, 1741, 49181, 1743, 49153, 148, 49156, 1744, 1745, 49161, 148, 49199, 1746, 49158,
		1747, 49153, 1748, 1749, 49153, 1750, 49155, 1751, 49153, 1752, 49153, 1753, 1748, 1751, 49161, 148, 49161, 1754, 148, 49158,
		1755, 148, 49172, 1746, 49156, 148, 49170, 1746, 49327, 148, 49183, 1756, 49183, 1757, 49174, 1758, 1759, 1760, 49153, 1761,
		49156, 1762, 49247, 148, 49220, 1763, 49157, 1764, 49155, 1765, 1766, 1763, 49197, 1767, 49160, 1768, 49158, 1765, 49155,
		1769, 49164, 1770, 49215, 148, 1771, 1772, 1773, 1774, 1775, 49162, 148, 49153, 1776, 49165, 148, 49388, 1777, 49156, 1778,
		49157, 1779, 49159, 1780, 49266, 1777, 49164, 1781, 49365, 1782, 49193, 148, 49160, 1781, 49270, 1780, 49263, 148, 49155,
		1783, 148, 49158, 1783, 148, 49153, 1783, 148, 1784, 1785, 49436, 1786, 1787, 49154, 1788, 49166, 148, 1789, 49180, 148,
		49154, 1790, 49153, 148, 1791, 49165, 148, 49155, 1792, 49159, 148, 49419, 1793, 49155, 1794, 49258, 1795, 49156, 1796, 49164,
		1795, 49154, 1796, 49160, 1795, 49158, 1796, 49161, 1795, 49153, 1796, 1797, 1798, 1799, 1800, 49155, 1801, 49243, 148, 49197,
		1802, 49153, 148, 49174, 1802, 49160, 148, 49267, 1803, 49211, 148, 49397, 1804, 49161, 148, 49190, 1804, 49153, 148, 914,
		49210, 1804, 1805, 1806, 49154, 1807, 49154, 1804, 1808, 49156, 1809, 49159, 1810, 49159, 1807, 49153, 1804, 49158, 1807,
		49181, 1804, 49155, 1807, 49199, 1804, 49162, 920, 49153, 1803, 49172, 148, 49217, 1327, 49154, 1811, 1327, 49273, 148, 49171,
		1812, 49163, 148, 49171, 1813, 49163, 148, 49238, 904, 49160, 148, 49169, 1814, 49158, 1813, 49158, 148, 49177, 1815, 49159,
		1816, 49153, 1817, 49167, 1816, 49177, 1815, 49158, 1816, 148, 49153, 1817, 49167, 1816, 49177, 1815, 49159, 1816, 49153,
		1817, 49167, 1816, 1815, 148, 49153, 1815, 49153, 148, 1815, 49153, 148, 49153, 1815, 49153, 148, 49155, 1815, 148, 49159,
		1815, 49155, 1816, 148, 1816, 148, 1816, 49153, 1817, 1816, 1818, 49153, 1816, 148, 49162, 1816, 49177, 1815, 49159, 1816,
		49153, 1817, 49167, 1816, 49153, 1815, 148, 49155, 1815, 49153, 148, 49159, 1815, 148, 49158, 1815, 148, 49159, 1816, 49153,
		1817, 49167, 1816, 49153, 1815, 148, 49155, 1815, 148, 49156, 1815, 148, 1815, 49154, 148, 49158, 1815, 148, 49159, 1816,
		49153, 1817, 49167, 1816, 49177, 1815, 49159, 1816, 49153, 1817, 49167, 1816, 49177, 1815, 49159, 1816, 49153, 1817, 49167,
		1816, 49177, 1815, 49159, 1816, 49153, 1817, 49167, 1816, 49177, 1815, 49159, 1816, 49153, 1817, 49167, 1816, 49177, 1815,
		49159, 1816, 49153, 1817, 49167, 1816, 49177, 1815, 49159, 1816, 49153, 1817, 49167, 1816, 49153, 905, 49153, 148, 49176,
		1815, 1819, 49176, 1816, 1819, 49157, 1816, 49176, 1815, 1819, 49176, 1816, 1819, 49157, 1816, 49176, 1815, 1819, 49176,
		1816, 1819, 49157, 1816, 49176, 1815, 1819, 49176, 1816, 1819, 49157, 1816, 49176, 1815, 1819, 49176, 1816, 1819, 49157,
		1816, 1820, 1821, 49153, 148, 49201, 1822, 49279, 1823, 49206, 1824, 49155, 1823, 49201, 1824, 49159, 1823, 1824, 49165,
		1823, 1824, 49153, 1823, 1825, 1826, 49153, 1825, 1827, 49166, 148, 49156, 1824, 148, 49166, 1824, 49231, 148, 49161, 1165,
		1828, 49166, 1165, 1829, 49155, 1165, 49157, 148, 49157, 1830, 49236, 148, 49158, 1831, 1832, 49168, 1831, 49153, 1832, 49158,
		1831, 1832, 49153, 1831, 1832, 49156, 1831, 49156, 1832, 49179, 1833, 49153, 1834, 49177, 1833, 1834, 49156, 1833, 49184,
		770, 1835, 49263, 148, 49196, 1836, 49154, 148, 49158, 1837, 49156, 1838, 49153, 1839, 49153, 148, 49161, 1840, 49155, 148,
		1836, 1841, 49215, 148, 49181, 1842, 1843, 49168, 1844, 49195, 1845, 49155, 1846, 49161, 1847, 49156, 1848, 1849, 49231,
		148, 49178, 1850, 1851, 49155, 1852, 49161, 1853, 49253, 148, 49158, 1854, 602, 49155, 1854, 602, 49153, 1854, 602, 49166,
		1854, 602, 49348, 1855, 49153, 148, 49160, 1856, 49158, 1857, 49192, 148, 49185, 1858, 49185, 1859, 49154, 1860, 1861, 49154,
		1862, 1863, 49155, 1864, 49161, 1865, 49155, 1864, 49153, 1866, 49296, 148, 49210, 1813, 1867, 49154, 1813, 1868, 49155,
		1813, 49227, 148, 49196, 1869, 1870, 49166, 1869, 49217, 148, 49155, 1871, 331, 49178, 1871, 331, 49153, 1871, 331, 1871,
		49153, 331, 1871, 331, 49161, 1871, 331, 49155, 1871, 331, 1871, 331, 1871, 49157, 331, 1871, 49155, 331, 65535, 3, 1871,
		331, 49154, 1871, 331, 49153, 1871, 331, 1871, 49153, 331, 65535, 5, 1871, 331, 49153, 1871, 331, 1871, 49153, 331, 49155,
		1871, 331, 49158, 1871, 331, 49155, 1871, 331, 49155, 1871, 331, 1871, 331, 49161, 1871, 331, 49168, 1871, 49156, 331, 49154,
		1871, 331, 49156, 1871, 331, 49168, 1871, 49203, 331, 49153, 1872, 49165, 331, 49195, 914, 49155, 148, 49251, 914, 49163,
		148, 49166, 1873, 49153, 148, 49165, 1873, 1874, 148, 49166, 1873, 148, 49166, 1873, 49173, 1874, 49161, 148, 49162, 915,
		49153, 1875, 49154, 1331, 49182, 1082, 1867, 1876, 1877, 49162, 1876, 1877, 1876, 1877, 49153, 1876, 1877, 49154, 1876, 1877,
		49154, 1876, 49156, 1082, 1873, 49158, 1876, 1877, 49158, 1876, 1877, 49161, 1876, 49153, 1878, 1870, 49154, 1331, 49160,
		1876, 1877, 1876, 49153, 1877, 49153, 1876, 1877, 49161, 1876, 49155, 1082, 49153, 1873, 1082, 49161, 1873, 49169, 1879,
		1331, 49207, 148, 49177, 1880, 1881, 49153, 1873, 49164, 148, 49185, 1082, 49160, 1873, 1879, 49155, 148, 49160, 1082, 49158,
		148, 49153, 1873, 49165, 148, 49157, 1882, 49177, 148, 49184, 1873, 49163, 1874, 49154, 920, 49157, 1873, 1874, 49221, 1873,
		1874, 49153, 920, 49171, 1873, 49163, 1874, 49188, 1873, 1874, 49156, 1873, 49155, 1874, 49156, 920, 49163, 1874, 49168,
		1873, 49158, 1874, 49154, 920, 49156, 1883, 49214, 1873, 1874, 1873, 1874, 49333, 1873, 1874, 49155, 1873, 49153, 1874, 920,
		49213, 1873, 49153, 1874, 49155, 1878, 49158, 1874, 49156, 920, 49175, 1873, 49169, 1874, 1879, 49192, 1874, 1879, 49237,
		1874, 49156, 1873, 1884, 49167, 1885, 1884, 49154, 1885, 65535, 3, 1884, 1885, 1884, 49154, 1885, 1884, 49157, 1885, 49153,
		1884, 49155, 1885, 1884, 1885, 49153, 1884, 49155, 1885, 1884, 49163, 1885, 49153, 1886, 49153, 1887, 49162, 1885, 49199,
		1874, 49221, 1873, 49161, 1874, 920, 49153, 1879, 49153, 1882, 1870, 49153, 1331, 49155, 148, 1888, 49154, 1803, 49164, 1874,
		49154, 148, 49155, 1874, 49154, 1879, 49153, 1882, 1867, 1870, 49153, 1331, 49154, 148, 49267, 1873, 49154, 1888, 49155,
		148, 49156, 1888, 49236, 1874, 49155, 1867, 1888, 49157, 148, 49163, 1870, 49155, 148, 1803, 49166, 148, 49163, 1874, 49155,
		148, 49207, 1874, 49159, 148, 49161, 1874, 49157, 148, 49191, 1874, 49159, 148, 49181, 1874, 49153, 148, 49153, 1331, 49229,
		148, 49163, 1882, 1331, 49154, 1870, 49160, 920, 49157, 1879, 1882, 49159, 1879, 49159, 1882, 1879, 49153, 1882, 49163, 1879,
		1870, 49163, 1879, 1882, 49154, 1867, 49166, 1879, 49164, 1882, 49156, 1867, 1870, 1331, 49155, 1867, 49153, 1331, 1803,
		1867, 1870, 49155, 1867, 49156, 920, 49164, 1879, 49157, 1882, 49162, 1867, 49153, 1331, 49157, 1870, 49154, 1331, 49153,
		1870, 49161, 1867, 49157, 1870, 920, 49153, 1867, 49159, 1870, 1331, 1803, 49154, 1870, 49174, 1882, 49176, 1867, 49235,
		1870, 49163, 148, 49165, 1867, 49153, 148, 49155, 1870, 1331, 49154, 1888, 49154, 1870, 49153, 1803, 49154, 148, 49154, 1870,
		49155, 1331, 49153, 1888, 49158, 148, 49157, 1870, 49170, 1331, 49155, 1803, 49154, 1888, 49158, 1331, 49155, 1803, 49154,
		1888, 148, 1888, 49154, 1331, 49154, 1803, 49159, 148, 49153, 1888, 49158, 1331, 49154, 1803, 49153, 1888, 49155, 148, 49159,
		1803, 1888, 49158, 148, 49158, 1803, 49153, 1888, 49158, 148, 49298, 1331, 148, 49206, 1331, 49188, 148, 49161, 1889, 49283,
		148, 49153, 1890, 49366, 1891, 49158, 1087, 49153, 1096, 49183, 148, 49332, 1091, 49155, 1096, 1892, 49157, 148, 49373, 1893,
		49153, 148, 49409, 1093, 49165, 148, 49456, 1094, 49166, 148, 49389, 1894, 49185, 148, 49309, 1895, 49249, 148, 49354, 1087,
		49156, 148, 49375, 1892, 49231, 148, 1896, 1897, 49181, 1896, 49247, 1898, 49279, 861, 49391, 1899, 49167, 861, 49405, 1900,
		49153, 1890
	};

	static constexpr std::array<std::uint_least8_t, 1715> rlepflagindices =
	{
		193, 0, 1, 2, 3, 4, 5, 193, 6, 7, 193, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 194, 25, 26,
		27, 28, 29, 30, 31, 32, 33, 28, 34, 35, 32, 193, 36, 35, 36, 37, 35, 36, 38, 39, 35, 32, 36, 198, 35, 36, 193, 35, 36, 35,
		36, 195, 35, 40, 36, 41, 42, 193, 36, 194, 35, 36, 35, 193, 38, 193, 35, 36, 193, 35, 193, 36, 195, 35, 37, 204, 36, 37,
		205, 36, 37, 36, 38, 43, 44, 45, 43, 46, 193, 26, 45, 26, 47, 48, 47, 49, 47, 193, 50, 35, 36, 26, 51, 52, 36, 53, 193, 35,
		54, 194, 35, 36, 35, 194, 36, 32, 193, 36, 35, 193, 55, 56, 57, 55, 32, 255, 3, 36, 35, 36, 193, 55, 36, 37, 58, 55, 59,
		35, 36, 35, 38, 195, 35, 194, 36, 37, 35, 36, 34, 194, 47, 60, 255, 9, 35, 36, 51, 35, 45, 34, 61, 38, 36, 32, 62, 63, 193,
		34, 51, 47, 50, 193, 64, 63, 34, 53, 64, 65, 34, 193, 40, 61, 194, 66, 59, 193, 34, 53, 193, 34, 193, 65, 67, 194, 62, 194,
		40, 68, 64, 65, 64, 47, 193, 65, 69, 34, 40, 65, 70, 40, 62, 65, 66, 34, 47, 45, 40, 34, 62, 53, 34, 51, 66, 40, 65, 40,
		64, 47, 193, 40, 71, 40, 51, 69, 40, 47, 45, 193, 34, 53, 62, 68, 51, 50, 34, 40, 65, 47, 72, 50, 51, 53, 62, 40, 50, 51,
		53, 193, 40, 61, 51, 66, 47, 196, 40, 45, 50, 65, 50, 66, 193, 64, 47, 65, 193, 73, 74, 193, 40, 75, 73, 74, 47, 76, 74,
		47, 62, 69, 34, 45, 193, 40, 195, 75, 40, 73, 74, 51, 40, 75, 47, 40, 77, 76, 40, 69, 195, 34, 40, 34, 50, 51, 193, 73, 74,
		40, 47, 74, 78, 73, 69, 34, 51, 73, 74, 193, 40, 75, 47, 76, 73, 69, 193, 34, 75, 73, 79, 51, 73, 74, 40, 193, 75, 47, 77,
		73, 76, 80, 69, 193, 34, 51, 73, 193, 40, 77, 74, 78, 40, 193, 69, 194, 34, 73, 74, 73, 40, 51, 193, 75, 47, 40, 73, 76,
		65, 193, 75, 40, 73, 69, 194, 34, 40, 73, 74, 34, 40, 51, 47, 40, 73, 77, 78, 40, 73, 69, 40, 74, 193, 73, 74, 193, 40, 51,
		193, 75, 81, 40, 77, 193, 73, 76, 40, 34, 40, 34, 40, 69, 193, 34, 51, 73, 74, 40, 78, 77, 73, 69, 34, 51, 40, 73, 82, 65,
		83, 34, 84, 68, 79, 47, 34, 69, 53, 51, 193, 40, 73, 82, 65, 81, 84, 68, 47, 79, 85, 69, 193, 40, 193, 34, 53, 47, 69, 194,
		34, 86, 51, 193, 40, 65, 73, 87, 74, 64, 81, 40, 193, 73, 34, 47, 196, 34, 193, 40, 193, 74, 193, 73, 47, 193, 81, 69, 62,
		34, 88, 64, 69, 88, 74, 73, 34, 35, 51, 35, 194, 89, 34, 90, 89, 193, 40, 193, 91, 195, 40, 51, 193, 47, 34, 53, 62, 92,
		193, 34, 194, 93, 51, 32, 63, 40, 34, 62, 40, 24, 40, 193, 34, 51, 40, 53, 193, 40, 51, 193, 40, 73, 81, 94, 51, 40, 73,
		95, 62, 51, 40, 73, 51, 40, 51, 73, 40, 70, 49, 74, 73, 79, 81, 62, 53, 72, 193, 34, 47, 51, 69, 193, 34, 53, 62, 53, 63,
		62, 96, 97, 30, 97, 69, 51, 40, 68, 40, 98, 65, 194, 40, 51, 73, 74, 47, 34, 62, 69, 194, 40, 84, 69, 92, 193, 34, 40, 65,
		74, 73, 51, 34, 40, 74, 73, 99, 47, 69, 34, 68, 62, 47, 100, 65, 47, 65, 73, 74, 40, 47, 77, 94, 40, 51, 69, 62, 34, 53,
		34, 62, 73, 74, 40, 94, 81, 73, 69, 193, 40, 50, 74, 73, 95, 51, 34, 40, 74, 73, 101, 47, 51, 62, 53, 193, 69, 40, 45, 46,
		62, 199, 32, 51, 35, 34, 51, 47, 102, 86, 193, 40, 47, 86, 40, 193, 38, 193, 43, 44, 90, 194, 36, 103, 90, 104, 90, 193,
		47, 50, 65, 194, 47, 193, 32, 38, 193, 35, 193, 36, 35, 197, 36, 32, 42, 35, 42, 36, 35, 36, 35, 36, 195, 35, 24, 30, 105,
		106, 107, 108, 109, 193, 110, 28, 111, 193, 23, 67, 24, 112, 69, 113, 193, 25, 193, 112, 193, 25, 29, 108, 69, 25, 24, 30,
		193, 114, 115, 67, 116, 104, 117, 118, 193, 119, 193, 90, 204, 34, 120, 194, 60, 194, 120, 34, 56, 121, 122, 35, 123, 193,
		35, 124, 35, 125, 38, 193, 34, 193, 121, 56, 59, 126, 194, 34, 36, 193, 34, 127, 128, 193, 40, 34, 29, 109, 193, 25, 29,
		129, 130, 25, 193, 109, 193, 131, 109, 193, 25, 109, 25, 29, 109, 197, 25, 132, 133, 134, 193, 34, 109, 198, 25, 34, 29,
		193, 109, 194, 29, 195, 109, 196, 25, 193, 35, 193, 36, 194, 35, 193, 36, 195, 35, 38, 104, 90, 193, 35, 36, 38, 34, 35,
		36, 47, 35, 36, 51, 193, 34, 193, 36, 193, 40, 51, 72, 34, 99, 65, 193, 25, 108, 25, 108, 195, 25, 112, 135, 193, 25, 108,
		112, 25, 108, 136, 28, 194, 25, 193, 136, 25, 112, 193, 25, 108, 137, 138, 139, 138, 140, 136, 68, 193, 141, 28, 142, 68,
		141, 72, 40, 34, 51, 193, 40, 47, 143, 68, 63, 40, 92, 46, 68, 40, 51, 195, 40, 193, 34, 194, 40, 197, 34, 202, 144, 40,
		68, 193, 34, 40, 72, 53, 62, 40, 68, 53, 62, 69, 51, 40, 60, 34, 65, 45, 43, 65, 193, 40, 47, 34, 62, 53, 51, 26, 193, 45,
		26, 35, 26, 35, 38, 40, 35, 36, 35, 193, 36, 38, 35, 36, 196, 35, 38, 196, 35, 255, 3, 36, 35, 36, 195, 35, 36, 38, 90, 40,
		43, 193, 40, 73, 145, 74, 34, 99, 40, 34, 62, 51, 74, 40, 78, 73, 51, 62, 69, 47, 40, 193, 34, 193, 40, 73, 69, 40, 73, 47,
		102, 62, 40, 73, 74, 94, 51, 34, 73, 74, 40, 47, 94, 34, 53, 62, 51, 68, 69, 40, 71, 68, 69, 51, 40, 73, 74, 51, 69, 34,
		62, 40, 68, 34, 88, 40, 65, 84, 47, 146, 68, 34, 53, 40, 74, 73, 62, 68, 81, 40, 36, 26, 43, 195, 38, 43, 26, 32, 40, 74,
		73, 62, 86, 81, 69, 40, 193, 22, 196, 141, 193, 32, 40, 64, 40, 59, 61, 147, 193, 25, 34, 148, 34, 97, 34, 61, 193, 34, 47,
		34, 63, 193, 34, 193, 149, 193, 34, 150, 151, 62, 123, 59, 152, 30, 149, 153, 154, 155, 156, 157, 193, 34, 92, 40, 158, 115,
		159, 193, 34, 148, 40, 34, 40, 197, 34, 40, 51, 40, 51, 47, 34, 193, 40, 34, 194, 40, 51, 40, 65, 40, 51, 53, 40, 53, 40,
		193, 35, 193, 36, 193, 40, 51, 69, 35, 51, 36, 40, 51, 40, 34, 35, 51, 36, 40, 43, 46, 193, 40, 53, 34, 40, 193, 34, 40,
		51, 34, 40, 51, 34, 40, 193, 34, 51, 53, 40, 51, 34, 193, 40, 34, 40, 73, 51, 65, 40, 50, 99, 194, 34, 62, 40, 193, 34, 40,
		34, 40, 34, 47, 51, 34, 53, 34, 40, 51, 34, 53, 40, 34, 40, 34, 40, 53, 34, 40, 35, 36, 34, 40, 146, 64, 69, 34, 40, 51,
		65, 63, 47, 40, 34, 40, 47, 34, 62, 51, 40, 47, 62, 40, 34, 51, 40, 51, 74, 73, 40, 78, 62, 53, 51, 34, 69, 81, 40, 73, 99,
		73, 74, 40, 78, 47, 34, 66, 62, 73, 51, 66, 40, 69, 65, 40, 73, 74, 81, 51, 69, 34, 62, 40, 74, 193, 40, 47, 34, 51, 73,
		74, 40, 94, 62, 34, 85, 47, 79, 62, 74, 73, 69, 40, 34, 40, 62, 34, 40, 51, 74, 73, 94, 47, 62, 53, 34, 73, 40, 73, 40, 51,
		62, 40, 73, 74, 47, 81, 51, 69, 193, 73, 74, 51, 40, 50, 47, 77, 94, 40, 160, 40, 74, 73, 78, 47, 62, 53, 34, 69, 53, 51,
		50, 194, 40, 77, 74, 73, 78, 47, 34, 51, 69, 40, 77, 74, 73, 51, 78, 47, 34, 62, 53, 96, 62, 40, 73, 40, 74, 73, 78, 62,
		34, 51, 69, 34, 40, 73, 74, 94, 47, 40, 34, 51, 69, 193, 40, 51, 73, 74, 81, 69, 34, 62, 34, 193, 40, 74, 73, 78, 47, 34,
		51, 35, 36, 69, 34, 193, 40, 77, 74, 73, 94, 81, 47, 62, 34, 69, 40, 51, 74, 73, 78, 34, 40, 73, 85, 81, 74, 34, 62, 40,
		73, 74, 40, 161, 81, 34, 62, 40, 53, 51, 193, 40, 34, 51, 40, 51, 74, 73, 78, 62, 53, 34, 69, 193, 34, 53, 40, 51, 73, 74,
		40, 73, 47, 81, 69, 40, 74, 73, 81, 69, 40, 73, 74, 62, 51, 73, 40, 74, 51, 95, 99, 62, 34, 69, 40, 51, 195, 34, 194, 40,
		51, 193, 40, 193, 53, 193, 40, 34, 51, 193, 40, 193, 159, 85, 79, 194, 40, 51, 69, 62, 40, 51, 69, 40, 47, 62, 40, 47, 62,
		53, 193, 34, 72, 68, 69, 34, 35, 36, 34, 53, 62, 34, 51, 193, 40, 51, 73, 193, 74, 71, 45, 193, 68, 34, 68, 162, 88, 194,
		141, 51, 193, 141, 45, 200, 40, 141, 51, 40, 51, 34, 85, 65, 62, 30, 79, 193, 34, 163, 69, 47, 86, 142, 30, 50, 194, 34,
		56, 121, 126, 121, 164, 56, 121, 113, 34, 85, 53, 62, 34, 40, 103, 38, 65, 51, 43, 44, 65, 40, 47, 72, 68, 69, 34, 40, 47,
		51, 40, 47, 69, 51, 34, 40, 72, 50, 69, 193, 40, 34, 47, 35, 36, 165, 65, 47, 72, 51, 69, 196, 34, 125, 59, 194, 34, 193,
		166, 193, 34, 167, 193, 34, 61, 196, 34, 69, 148, 195, 144, 141, 115, 116, 168, 97, 22, 51
	};

	static constexpr std::array<std::uint_least8_t, 1418> rlecflagindices =
	{
		193, 0, 1, 2, 3, 194, 4, 5, 194, 4, 5, 194, 4, 6, 4, 7, 8, 5, 9, 5, 10, 193, 11, 0, 2, 3, 4, 194, 5, 11, 4, 194, 5, 11, 193,
		4, 5, 8, 194, 11, 8, 193, 11, 8, 194, 11, 8, 193, 11, 198, 8, 11, 193, 8, 11, 8, 11, 195, 8, 12, 11, 8, 12, 193, 11, 194,
		8, 11, 8, 193, 11, 193, 8, 11, 193, 8, 193, 11, 195, 8, 225, 11, 12, 11, 12, 193, 5, 12, 5, 13, 11, 196, 13, 8, 11, 5, 14,
		193, 11, 4, 193, 8, 4, 194, 8, 11, 8, 197, 11, 8, 193, 11, 193, 8, 194, 11, 8, 11, 8, 11, 8, 196, 11, 8, 11, 5, 8, 11, 8,
		11, 195, 8, 195, 11, 8, 11, 5, 195, 13, 255, 9, 8, 11, 14, 8, 12, 193, 4, 194, 11, 193, 4, 193, 5, 14, 193, 13, 193, 12,
		194, 4, 193, 12, 4, 193, 12, 4, 195, 5, 4, 5, 193, 4, 5, 193, 12, 5, 194, 4, 198, 12, 13, 193, 12, 6, 4, 195, 12, 4, 12,
		193, 5, 13, 193, 12, 5, 194, 4, 14, 5, 195, 12, 13, 195, 12, 14, 6, 12, 13, 12, 5, 194, 4, 12, 14, 13, 5, 193, 12, 13, 12,
		13, 14, 193, 4, 12, 13, 14, 4, 193, 12, 5, 14, 5, 13, 197, 12, 13, 12, 13, 5, 193, 12, 13, 200, 12, 193, 13, 12, 13, 4, 6,
		4, 201, 12, 14, 193, 12, 13, 193, 12, 13, 12, 6, 195, 5, 12, 4, 13, 14, 195, 12, 13, 12, 13, 12, 6, 4, 14, 196, 12, 193,
		13, 12, 6, 4, 5, 193, 12, 13, 14, 196, 12, 13, 193, 12, 193, 13, 6, 193, 5, 14, 196, 12, 13, 12, 193, 6, 194, 5, 195, 12,
		14, 193, 12, 13, 193, 12, 13, 196, 12, 6, 4, 193, 5, 194, 12, 4, 12, 14, 13, 194, 12, 13, 193, 12, 6, 198, 12, 14, 193, 12,
		13, 195, 12, 13, 12, 5, 12, 5, 12, 6, 193, 5, 14, 194, 12, 13, 193, 12, 6, 4, 14, 196, 12, 5, 193, 12, 193, 13, 4, 6, 4,
		14, 196, 12, 13, 193, 12, 194, 13, 6, 193, 12, 5, 193, 4, 13, 6, 5, 193, 4, 13, 14, 198, 12, 13, 194, 12, 5, 13, 5, 193,
		4, 5, 4, 197, 12, 194, 13, 6, 193, 4, 193, 12, 6, 194, 12, 5, 8, 14, 8, 194, 11, 4, 193, 11, 199, 12, 14, 193, 13, 194, 4,
		194, 5, 194, 8, 14, 11, 4, 12, 5, 4, 12, 3, 12, 193, 4, 14, 12, 4, 193, 12, 14, 194, 12, 193, 13, 14, 193, 12, 13, 4, 14,
		193, 12, 14, 12, 14, 194, 12, 13, 193, 12, 193, 13, 193, 4, 12, 4, 5, 13, 14, 6, 5, 198, 4, 13, 5, 13, 6, 14, 199, 12, 14,
		193, 12, 13, 5, 4, 6, 195, 12, 6, 194, 5, 195, 12, 14, 4, 194, 12, 193, 13, 6, 4, 12, 4, 193, 13, 12, 13, 195, 12, 13, 12,
		13, 12, 14, 6, 194, 4, 5, 4, 194, 12, 193, 13, 12, 6, 193, 12, 13, 193, 12, 13, 14, 4, 195, 12, 13, 14, 193, 4, 193, 6, 194,
		12, 4, 199, 11, 14, 8, 4, 14, 13, 4, 13, 193, 12, 193, 13, 12, 204, 11, 194, 13, 12, 194, 13, 194, 11, 193, 8, 193, 11, 8,
		198, 11, 12, 8, 12, 11, 8, 11, 8, 11, 195, 8, 3, 5, 193, 13, 5, 197, 4, 193, 15, 5, 3, 4, 193, 9, 197, 4, 5, 4, 9, 4, 3,
		194, 5, 14, 193, 5, 11, 193, 5, 193, 4, 193, 11, 204, 5, 198, 13, 5, 8, 11, 5, 8, 5, 193, 8, 5, 8, 12, 11, 193, 5, 193, 11,
		8, 5, 11, 194, 5, 11, 193, 5, 8, 11, 193, 12, 200, 5, 195, 4, 204, 5, 14, 8, 11, 199, 5, 193, 4, 193, 5, 193, 4, 194, 5,
		195, 4, 196, 5, 193, 8, 193, 11, 194, 8, 193, 11, 195, 8, 194, 11, 193, 8, 193, 11, 5, 8, 11, 13, 8, 11, 14, 4, 5, 193, 11,
		193, 12, 14, 12, 4, 13, 12, 201, 4, 12, 209, 4, 196, 5, 4, 194, 12, 4, 13, 195, 12, 4, 14, 193, 12, 13, 5, 12, 4, 12, 4,
		194, 12, 14, 195, 12, 193, 5, 194, 12, 197, 5, 204, 12, 193, 5, 193, 12, 193, 4, 193, 12, 193, 4, 6, 14, 12, 13, 4, 193,
		12, 11, 194, 12, 13, 194, 4, 14, 5, 193, 12, 5, 8, 5, 8, 11, 12, 8, 11, 8, 194, 11, 8, 11, 196, 8, 11, 196, 8, 255, 3, 11,
		8, 11, 195, 8, 194, 11, 12, 11, 194, 12, 13, 12, 5, 13, 12, 193, 4, 14, 193, 12, 13, 12, 14, 4, 6, 13, 12, 193, 4, 194, 12,
		6, 193, 12, 13, 193, 4, 194, 12, 13, 14, 4, 194, 12, 193, 13, 194, 4, 14, 12, 6, 194, 12, 6, 14, 194, 12, 14, 6, 193, 4,
		193, 12, 5, 195, 12, 13, 193, 12, 193, 4, 194, 12, 4, 12, 13, 12, 11, 5, 197, 11, 5, 11, 194, 12, 4, 193, 13, 6, 12, 14,
		5, 196, 12, 193, 11, 194, 12, 193, 5, 12, 193, 4, 5, 14, 5, 13, 195, 4, 13, 203, 4, 5, 4, 5, 193, 4, 6, 7, 5, 10, 194, 4,
		193, 12, 14, 194, 5, 14, 12, 4, 12, 197, 5, 12, 14, 12, 14, 13, 5, 193, 12, 5, 194, 12, 14, 194, 12, 14, 4, 12, 4, 12, 193,
		8, 193, 11, 193, 12, 14, 6, 8, 14, 11, 12, 14, 12, 4, 8, 14, 11, 12, 11, 194, 12, 4, 5, 12, 193, 5, 12, 14, 5, 12, 14, 5,
		12, 193, 5, 14, 4, 12, 14, 4, 193, 12, 5, 193, 12, 14, 193, 12, 193, 13, 193, 5, 193, 4, 12, 5, 4, 12, 5, 12, 5, 13, 14,
		5, 193, 4, 12, 14, 193, 4, 12, 5, 12, 5, 12, 4, 5, 12, 8, 11, 5, 194, 12, 6, 5, 12, 14, 12, 4, 13, 12, 5, 12, 13, 5, 4, 14,
		12, 13, 4, 12, 5, 14, 12, 14, 194, 12, 13, 193, 4, 14, 5, 6, 13, 193, 12, 13, 194, 12, 193, 13, 4, 5, 4, 12, 14, 5, 12, 6,
		195, 12, 13, 14, 6, 193, 4, 195, 12, 13, 4, 14, 194, 12, 13, 193, 4, 194, 13, 4, 193, 12, 6, 12, 4, 12, 4, 5, 12, 14, 193,
		12, 193, 13, 194, 4, 195, 12, 14, 4, 194, 12, 193, 13, 14, 6, 194, 12, 14, 12, 193, 13, 12, 13, 196, 12, 193, 13, 194, 4,
		6, 4, 14, 13, 197, 12, 193, 13, 4, 14, 6, 195, 12, 14, 193, 13, 196, 4, 196, 12, 13, 193, 4, 14, 6, 4, 194, 12, 193, 13,
		12, 4, 14, 6, 193, 12, 14, 193, 12, 13, 6, 5, 4, 5, 195, 12, 193, 13, 4, 14, 8, 11, 6, 5, 196, 12, 194, 13, 193, 4, 6, 12,
		14, 193, 12, 13, 4, 193, 12, 193, 13, 12, 193, 4, 195, 12, 193, 13, 193, 4, 12, 4, 14, 193, 12, 4, 14, 12, 14, 193, 12, 13,
		194, 4, 6, 5, 193, 4, 12, 14, 195, 12, 193, 13, 6, 194, 12, 13, 6, 194, 12, 4, 14, 194, 12, 14, 193, 13, 193, 4, 6, 12, 14,
		194, 5, 4, 194, 12, 14, 193, 12, 193, 4, 193, 12, 4, 14, 193, 12, 193, 5, 193, 13, 194, 12, 14, 6, 4, 12, 14, 6, 12, 13,
		4, 12, 13, 194, 4, 5, 193, 12, 6, 5, 8, 11, 5, 194, 4, 14, 193, 12, 14, 198, 12, 4, 12, 13, 195, 12, 14, 204, 12, 14, 12,
		14, 5, 13, 12, 4, 5, 13, 193, 5, 196, 13, 5, 13, 194, 5, 8, 194, 11, 5, 8, 11, 6, 5, 13, 194, 4, 12, 193, 11, 12, 14, 193,
		11, 193, 12, 13, 193, 12, 6, 5, 12, 13, 14, 12, 13, 6, 14, 5, 193, 12, 13, 6, 193, 12, 5, 13, 8, 11, 13, 12, 13, 12, 14,
		6, 4, 195, 5, 12, 195, 5, 193, 8, 202, 5, 6, 14, 196, 12, 14, 193, 5, 13, 5, 14
	};

	static constexpr std::array<std::uint_least16_t, 1284> rleabfields =
	{
		49230, 1024, 49155, 4096, 6144, 7168, 49158, 8192, 49157, 9216, 49181, 1024, 4096, 49156, 1024, 49154, 4096, 7168, 49153,
		1024, 4096, 6144, 7168, 8192, 6144, 49153, 10240, 1024, 0, 1024, 9216, 1024, 16384, 49164, 1024, 10240, 49157, 1024, 4096,
		49153, 6144, 1024, 4096, 49157, 1024, 49153, 5120, 6144, 49154, 7168, 49153, 8192, 4105, 49154, 1033, 4105, 49158, 1033,
		10249, 4105, 49153, 6153, 49153, 4105, 1033, 9225, 49153, 8201, 49153, 9225, 49153, 10249, 49153, 11273, 49153, 12297, 49153,
		16393, 11, 49155, 1035, 20491, 49154, 1035, 4107, 16395, 13323, 12, 2060, 8204, 1036, 9228, 49154, 1036, 2060, 49153, 8204,
		1036, 20492, 1036, 7181, 13325, 16397, 49153, 10253, 8205, 1037, 49154, 7181, 10253, 15373, 24589, 8205, 1037, 12301, 1037,
		10253, 49153, 1037, 4109, 49153, 7181, 8205, 12301, 49153, 1037, 6157, 49153, 1037, 4109, 49157, 1037, 7181, 4109, 49154,
		4110, 14, 49154, 4110, 7182, 49153, 4110, 8205, 49153, 4112, 6160, 16, 49160, 9233, 17, 49153, 20497, 49156, 11282, 18, 49153,
		11282, 49153, 12307, 19, 12307, 19470, 49153, 24589, 13, 49153, 24589, 13325, 16397, 17421, 18445, 23565, 24589, 20493, 49154,
		18445, 17421, 49153, 13325, 16397, 11286, 49153, 1046, 7190, 49153, 1046, 49153, 12310, 49153, 1046, 11286, 49155, 1046,
		49153, 10262, 12310, 16406, 11286, 9238, 8214, 16407, 49153, 1047, 23, 49154, 1047, 7191, 49153, 1047, 8215, 49155, 1047,
		11287, 49153, 19479, 20503, 24, 7192, 1048, 7192, 49155, 1048, 10264, 1048, 20504, 25, 49154, 1049, 7193, 49154, 1049, 7193,
		1049, 13337, 7193, 17433, 49153, 19481, 26, 49155, 1050, 7194, 49153, 1050, 10266, 1050, 23578, 49153, 1050, 12314, 27, 49153,
		1051, 8219, 49154, 1051, 10267, 8219, 49153, 1051, 49153, 7195, 16412, 1052, 20508, 1052, 28, 1052, 16412, 24604, 10268,
		49154, 1052, 10268, 17436, 24604, 10268, 1052, 21532, 49153, 10268, 18461, 16413, 1053, 20509, 1053, 29, 49153, 7197, 49154,
		1053, 24605, 9245, 1053, 9245, 25629, 19486, 16414, 1054, 23582, 1054, 30, 1054, 12318, 19486, 10270, 49153, 1054, 10270,
		1054, 12318, 49154, 18462, 17438, 1054, 49153, 10270, 31, 23583, 49156, 4127, 16415, 4127, 32, 49164, 1056, 33, 1057, 21537,
		49154, 1057, 21537, 49155, 1057, 25633, 1057, 13345, 49161, 2082, 34, 4130, 10274, 49157, 2082, 49153, 12322, 49154, 4130,
		10274, 8226, 10274, 11298, 12322, 4131, 49153, 10275, 49153, 4131, 10275, 49153, 4131, 10275, 49154, 4131, 49154, 10275,
		49154, 11299, 10275, 1060, 36, 13348, 1060, 6180, 8228, 1060, 8228, 13348, 1024, 11264, 49154, 1024, 11264, 4134, 8230, 38,
		12326, 49153, 8230, 49155, 4134, 8230, 49153, 4136, 17448, 40, 17448, 11264, 49154, 4096, 11264, 49155, 4138, 42, 49154,
		4139, 16427, 43, 6188, 24620, 49153, 6188, 24620, 44, 49155, 6189, 45, 49153, 6190, 46, 6191, 47, 6191, 49163, 4144, 7216,
		48, 4144, 7216, 49160, 4145, 24625, 4145, 49, 49153, 4145, 20529, 49153, 4145, 10289, 7219, 16435, 51, 49157, 7219, 7168,
		8192, 11264, 49153, 8192, 11264, 8192, 7216, 49155, 8247, 55, 8247, 49160, 11264, 49153, 16384, 23552, 49153, 24576, 49157,
		9274, 24634, 58, 49156, 9274, 24634, 49155, 10299, 49153, 13371, 10299, 13371, 49156, 12348, 60, 12348, 49156, 10301, 61,
		49154, 10301, 49156, 10240, 49159, 18441, 9, 20516, 13371, 59, 49155, 11264, 49153, 13312, 19456, 21504, 49156, 7168, 49159,
		8192, 9216, 49153, 10240, 16384, 19456, 18432, 12288, 1024, 2048, 49155, 10240, 49186, 1024, 4096, 49156, 1024, 6144, 49153,
		4096, 49153, 6144, 49153, 7168, 8192, 49154, 6144, 10240, 0, 15360, 1024, 6144, 49156, 1024, 12288, 1024, 2048, 3072, 4096,
		6144, 8192, 11264, 12288, 14336, 16384, 17408, 19456, 24576, 49153, 1024, 4096, 49153, 6144, 8192, 9216, 49162, 1024, 49153,
		4096, 7168, 8192, 49156, 6144, 8192, 49153, 9216, 10240, 11264, 49154, 1024, 10240, 17408, 49154, 1101, 4173, 6221, 49153,
		1024, 4096, 49155, 1024, 49153, 6144, 49153, 7168, 8192, 49154, 9216, 11264, 12288, 16384, 18432, 19456, 0, 49153, 1024,
		6144, 7168, 1024, 10240, 16471, 1111, 12375, 11351, 49153, 6231, 1111, 49154, 8192, 13312, 10240, 12288, 49153, 6144, 49153,
		10240, 4096, 23552, 20480, 21504, 17408, 8287, 24671, 8287, 24671, 49156, 9216, 49154, 10240, 11264, 9216, 49153, 10240,
		11264, 49155, 8289, 49154, 11361, 49153, 13409, 97, 49153, 8289, 8228, 13348, 8291, 13411, 99, 8291, 49153, 12387, 10249,
		49154, 8192, 49159, 10240, 11264, 49153, 13312, 49156, 16384, 18432, 19456, 49153, 20480, 21504, 23552, 49155, 24576, 49154,
		4096, 49153, 26624, 49158, 1024, 4096, 49154, 6144, 107, 1131, 6251, 49154, 1131, 6252, 49155, 1132, 6252, 109, 1133, 10349,
		19565, 20589, 49153, 1135, 4205, 12397, 23661, 1024, 7168, 11264, 8192, 1024, 22528, 4096, 23552, 1024, 8192, 10240, 11264,
		13312, 17408, 19456, 20480, 24576, 49154, 4096, 6144, 49155, 11386, 49156, 10363, 123, 49154, 10249, 13321, 10249, 16393,
		17417, 49157, 11389, 125, 8192, 9216, 10240, 9216, 49153, 10240, 49153, 12288, 17408, 49153, 12288, 49153, 13312, 49155,
		16384, 13312, 49154, 16384, 18432, 20480, 49153, 16384, 49155, 17408, 49153, 20480, 49153, 21504, 49153, 24576, 49154, 21504,
		49153, 23552, 49153, 24576, 16384, 13312, 10240, 49156, 8192, 23552, 49154, 9346, 130, 49154, 10371, 18563, 131, 49153, 10371,
		49154, 11286, 49153, 17430, 49153, 20502, 49157, 10240, 49155, 10374, 134, 10374, 49159, 11400, 136, 49153, 11400, 49155,
		16419, 35, 49154, 10378, 138, 49154, 10378, 49154, 11299, 16419, 49159, 11264, 49157, 13312, 12326, 49154, 16384, 17408,
		16384, 21504, 49154, 23552, 17448, 49158, 11264, 49153, 2048, 49153, 1024, 13312, 6144, 11264, 8192, 49153, 1024, 4096, 49154,
		1024, 12301, 49154, 1037, 24589, 5133, 6157, 6144, 49155, 8192, 17408, 49157, 1024, 49153, 7168, 49157, 1024, 1037, 49157,
		1024, 49153, 6144, 49154, 1024, 162, 4258, 3234, 49153, 1186, 49153, 7168, 49154, 8192, 49153, 16384, 18432, 23552, 10409,
		169, 10410, 170, 49153, 16481, 5120, 16384, 5120, 19456, 49153, 5293, 173, 49153, 16384, 7343, 175, 7343, 49154, 8192, 5297,
		7345, 5297, 7345, 7346, 7347, 179, 7347, 18612, 180, 18612, 16565, 181, 49153, 16384, 24886, 310, 24886, 16384, 49153, 24576,
		7168, 49154, 11264, 49154, 16570, 16571, 187, 16571, 17596, 188, 17596, 49153, 9405, 11453, 189, 9405, 10430, 190, 10430,
		49153, 13312, 17408, 49153, 8385, 193, 8385, 20673, 49154, 8385, 20673, 49153, 8385, 49154, 11264, 49153, 16384, 49154, 16580,
		196, 49154, 16580, 11461, 197, 49153, 11461, 49155, 11264, 49154, 16384, 11264, 49154, 17408, 49155, 20480, 11264, 23853,
		301, 49153, 23853, 25613, 49153, 20480, 49155, 20764, 284, 49154, 24576, 49153, 23854, 302, 21796, 292, 49157, 12492, 204,
		49153, 12492, 49154, 24780, 16588, 49159, 11469, 24781, 205, 20685, 49153, 13312, 49156, 13519, 207, 49154, 13519, 49153,
		20687, 23759, 49154, 16592, 208, 49157, 13521, 49154, 17617, 16593, 49153, 23761, 13521, 16593, 49154, 17617, 16415, 16595,
		211, 49158, 16595, 18643, 49153, 25811, 17620, 212, 17620, 49156, 16597, 213, 16597, 17622, 49153, 16598, 214, 16598, 20694,
		49154, 16598, 17622, 16598, 49160, 18647, 23767, 215, 20695, 21719, 23767, 49158, 16600, 216, 16600, 49155, 16601, 217, 49157,
		16601, 49154, 17625, 49157, 16602, 218, 16602, 18481, 49156, 13532, 21724, 24796, 220, 13532, 17629, 20701, 221, 49158, 17629,
		24797, 49157, 20765, 285, 49156, 16384, 49161, 23552, 21797, 293, 49155, 21797, 49158, 19456, 49154, 19680, 21728, 49155,
		19680, 20704, 19680, 224, 24576, 16384, 25622, 22, 18658, 226, 49159, 18658, 49154, 18659, 227, 49153, 18659, 49156, 19456,
		49156, 20480, 49155, 20767, 287, 49154, 25923, 323, 49156, 25923, 23674, 122, 49155, 21531, 9445, 16613, 17637, 229, 9445,
		16613, 9445, 16613, 17408, 49153, 24890, 314, 11264, 25600, 21504, 49154, 25600, 17408, 12413, 16619, 235, 49153, 16619,
		24891, 315, 24891, 49164, 16384, 49157, 20768, 288, 13550, 21742, 238, 21742, 13550, 21742, 49153, 13550, 18432, 19456, 49153,
		21504, 49153, 23552, 18672, 20720, 21744, 240, 23792, 23552, 24576, 49153, 12288, 19456, 49153, 24576, 25600, 21504, 25600,
		21504, 19700, 244, 16629, 245, 49155, 16629, 16384, 49153, 24576, 49158, 5120, 8192, 25600, 20480, 9216, 49154, 5120, 7168,
		5120, 49153, 9216, 5120, 49156, 17408, 49153, 24576, 25600, 18527, 95, 49154, 25609, 49157, 21504, 49153, 24895, 319, 49154,
		21802, 298, 21802, 49155, 25600, 24614, 49154, 16384, 49156, 18688, 21760, 256, 49153, 18688, 49153, 20480, 49153, 21504,
		49153, 13325, 12288, 49153, 16384, 12288, 11264, 13312, 18432, 12288, 11264, 19456, 17408, 13576, 12552, 16648, 17672, 25600,
		23552, 2048, 5120, 25600, 12288, 26624, 5120, 277, 49153, 5397, 7168, 2048, 0
	};

	static constexpr std::array<std::uint_least8_t, 1604> rlegcindices =
	{
		195, 25, 24, 194, 16, 18, 16, 17, 13, 20, 16, 12, 16, 8, 16, 193, 4, 19, 11, 19, 194, 0, 193, 25, 24, 16, 18, 21, 19, 2,
		15, 20, 26, 10, 0, 16, 14, 10, 4, 194, 0, 4, 193, 0, 4, 194, 0, 4, 193, 0, 198, 4, 0, 193, 4, 0, 4, 0, 195, 4, 2, 0, 4, 3,
		193, 0, 194, 4, 0, 4, 193, 0, 193, 4, 0, 193, 4, 193, 0, 195, 4, 223, 0, 196, 1, 193, 19, 1, 19, 198, 7, 4, 0, 19, 27, 1,
		0, 16, 193, 4, 16, 194, 4, 0, 4, 197, 0, 4, 193, 0, 193, 4, 194, 0, 4, 0, 4, 0, 4, 196, 0, 4, 0, 20, 4, 0, 4, 0, 195, 4,
		195, 0, 4, 0, 21, 194, 7, 6, 255, 9, 4, 0, 27, 4, 1, 193, 16, 194, 0, 16, 12, 21, 18, 27, 195, 7, 12, 193, 16, 193, 7, 16,
		193, 2, 16, 194, 26, 20, 16, 18, 193, 16, 21, 193, 7, 26, 194, 16, 194, 2, 1, 197, 7, 8, 16, 2, 7, 193, 2, 16, 7, 26, 21,
		7, 1, 2, 21, 194, 16, 27, 26, 2, 7, 2, 193, 7, 193, 2, 7, 2, 27, 8, 2, 7, 1, 21, 194, 16, 1, 27, 7, 18, 2, 193, 7, 1, 7,
		27, 193, 16, 2, 7, 27, 16, 193, 2, 19, 27, 26, 7, 196, 2, 1, 194, 7, 26, 197, 7, 5, 194, 2, 7, 5, 193, 7, 5, 7, 16, 8, 16,
		1, 198, 2, 7, 5, 27, 193, 2, 7, 2, 5, 7, 2, 8, 18, 10, 21, 18, 2, 16, 7, 27, 193, 7, 5, 2, 7, 5, 193, 7, 8, 16, 27, 7, 5,
		194, 2, 194, 7, 8, 16, 18, 2, 193, 7, 27, 7, 5, 194, 2, 7, 5, 194, 7, 8, 21, 10, 27, 7, 193, 2, 193, 5, 7, 2, 193, 8, 10,
		21, 18, 7, 5, 7, 2, 27, 193, 2, 7, 2, 194, 7, 194, 2, 7, 8, 16, 10, 21, 2, 7, 5, 16, 2, 27, 7, 2, 7, 5, 7, 2, 7, 8, 2, 5,
		193, 7, 5, 193, 2, 27, 193, 2, 7, 2, 5, 194, 7, 2, 21, 2, 10, 2, 8, 10, 21, 27, 7, 5, 2, 7, 5, 7, 8, 16, 27, 2, 7, 2, 193,
		7, 18, 2, 1, 193, 7, 16, 8, 16, 27, 193, 2, 7, 2, 193, 7, 2, 1, 194, 7, 8, 193, 2, 21, 193, 16, 7, 8, 10, 17, 13, 5, 27,
		193, 2, 194, 7, 5, 193, 7, 2, 193, 7, 21, 7, 21, 193, 16, 21, 16, 193, 2, 193, 5, 196, 7, 8, 193, 16, 5, 7, 8, 193, 5, 7,
		21, 4, 27, 4, 194, 0, 16, 1, 0, 199, 2, 27, 193, 7, 194, 16, 193, 10, 21, 194, 4, 27, 0, 12, 2, 21, 16, 2, 24, 2, 17, 13,
		27, 2, 16, 9, 2, 27, 193, 2, 193, 7, 5, 27, 2, 7, 5, 16, 27, 2, 7, 27, 2, 27, 7, 193, 2, 7, 5, 194, 7, 193, 16, 1, 16, 18,
		7, 27, 8, 10, 195, 16, 12, 193, 16, 7, 26, 7, 8, 27, 2, 1, 2, 193, 7, 194, 2, 27, 7, 5, 7, 21, 16, 8, 195, 2, 8, 10, 193,
		21, 2, 7, 5, 7, 27, 16, 2, 5, 194, 7, 8, 16, 1, 16, 7, 6, 195, 7, 5, 2, 7, 193, 5, 2, 27, 8, 194, 16, 21, 16, 7, 5, 2, 5,
		193, 7, 8, 193, 2, 7, 5, 7, 5, 27, 16, 2, 5, 194, 7, 27, 193, 16, 193, 8, 2, 193, 1, 16, 199, 0, 27, 4, 16, 27, 7, 16, 5,
		193, 2, 7, 5, 2, 193, 0, 195, 1, 195, 0, 194, 1, 198, 7, 194, 0, 193, 4, 193, 0, 4, 198, 0, 3, 4, 3, 0, 4, 0, 4, 0, 195,
		4, 24, 195, 26, 12, 16, 15, 14, 17, 16, 22, 23, 26, 24, 16, 193, 11, 17, 13, 195, 16, 20, 16, 11, 16, 24, 194, 26, 27, 193,
		26, 1, 193, 20, 17, 13, 193, 1, 204, 18, 7, 194, 6, 194, 7, 21, 4, 0, 20, 4, 21, 193, 4, 21, 4, 2, 0, 193, 21, 193, 0, 4,
		20, 0, 194, 21, 0, 21, 10, 195, 9, 21, 20, 194, 21, 194, 20, 21, 17, 13, 17, 13, 196, 21, 20, 198, 21, 27, 193, 21, 193,
		10, 197, 21, 17, 13, 10, 20, 17, 13, 194, 20, 17, 13, 17, 13, 196, 21, 193, 4, 193, 0, 194, 4, 193, 0, 195, 4, 0, 193, 1,
		193, 4, 193, 0, 21, 4, 0, 7, 4, 0, 27, 16, 10, 193, 0, 193, 2, 27, 1, 16, 193, 7, 15, 14, 12, 16, 12, 15, 14, 17, 13, 16,
		1, 193, 16, 12, 193, 16, 12, 16, 17, 198, 16, 17, 13, 12, 196, 21, 16, 1, 2, 9, 13, 5, 1, 9, 1, 2, 16, 27, 193, 2, 7, 19,
		1, 12, 2, 16, 193, 1, 2, 27, 195, 2, 21, 10, 194, 2, 197, 21, 203, 2, 1, 193, 21, 2, 1, 193, 16, 2, 1, 193, 16, 8, 27, 2,
		6, 16, 7, 193, 1, 7, 2, 9, 7, 194, 16, 27, 19, 193, 1, 19, 4, 19, 4, 0, 2, 4, 0, 4, 194, 0, 4, 0, 196, 4, 0, 196, 4, 255,
		3, 0, 4, 0, 195, 4, 193, 0, 1, 2, 1, 193, 2, 193, 7, 5, 21, 7, 2, 193, 16, 27, 5, 2, 193, 7, 27, 16, 8, 7, 2, 193, 16, 193,
		2, 7, 8, 2, 193, 7, 193, 16, 2, 7, 193, 5, 27, 16, 7, 5, 2, 7, 5, 194, 16, 27, 1, 8, 2, 7, 1, 8, 27, 2, 7, 5, 27, 8, 193,
		16, 2, 1, 21, 5, 2, 7, 2, 7, 2, 1, 193, 16, 2, 5, 7, 16, 1, 7, 2, 0, 19, 1, 195, 0, 1, 19, 0, 2, 5, 7, 16, 5, 7, 8, 2, 29,
		28, 196, 2, 193, 0, 2, 7, 2, 20, 19, 2, 13, 17, 21, 27, 18, 7, 193, 16, 17, 13, 7, 16, 12, 255, 3, 17, 13, 195, 16, 20, 12,
		26, 193, 16, 8, 4, 19, 0, 17, 13, 16, 2, 1, 27, 26, 193, 21, 27, 2, 16, 9, 10, 21, 10, 194, 21, 2, 27, 2, 27, 7, 10, 193,
		2, 10, 193, 2, 9, 27, 2, 7, 2, 27, 16, 2, 16, 9, 193, 4, 193, 0, 193, 2, 27, 8, 4, 27, 0, 2, 27, 2, 16, 4, 27, 0, 2, 193,
		1, 193, 2, 16, 10, 2, 21, 10, 2, 27, 10, 2, 27, 10, 2, 193, 10, 27, 16, 2, 27, 16, 193, 2, 10, 2, 7, 27, 7, 2, 193, 7, 193,
		10, 193, 16, 2, 10, 16, 2, 10, 2, 21, 7, 27, 10, 193, 16, 2, 27, 193, 16, 2, 10, 2, 10, 2, 16, 10, 2, 4, 0, 10, 193, 2, 7,
		8, 10, 2, 27, 7, 12, 7, 2, 10, 2, 7, 10, 16, 27, 2, 7, 16, 2, 10, 27, 2, 27, 5, 7, 2, 7, 193, 16, 27, 10, 8, 7, 2, 194, 7,
		5, 2, 193, 7, 16, 26, 16, 7, 27, 26, 2, 8, 7, 2, 7, 5, 7, 27, 8, 193, 16, 2, 5, 193, 2, 7, 16, 27, 7, 5, 2, 5, 193, 16, 194,
		7, 16, 5, 7, 8, 2, 16, 2, 16, 10, 2, 27, 5, 7, 5, 7, 194, 16, 7, 2, 7, 2, 27, 16, 2, 7, 5, 193, 7, 27, 8, 193, 7, 5, 27,
		2, 193, 7, 193, 5, 194, 2, 5, 194, 7, 194, 16, 8, 16, 27, 7, 194, 2, 193, 5, 194, 7, 16, 27, 8, 2, 193, 5, 7, 27, 193, 7,
		196, 16, 2, 7, 2, 5, 193, 7, 193, 16, 27, 8, 16, 2, 7, 193, 5, 7, 2, 16, 27, 8, 193, 2, 27, 7, 5, 7, 8, 10, 16, 21, 193,
		2, 5, 194, 7, 16, 27, 4, 0, 8, 10, 193, 2, 193, 5, 7, 5, 193, 7, 193, 16, 8, 2, 27, 5, 193, 7, 16, 2, 194, 7, 5, 193, 16,
		2, 7, 5, 2, 193, 7, 193, 16, 2, 16, 27, 193, 2, 16, 27, 2, 27, 5, 193, 7, 194, 16, 8, 10, 193, 16, 2, 27, 7, 5, 2, 194, 7,
		8, 2, 5, 193, 7, 8, 2, 7, 5, 16, 27, 7, 2, 5, 27, 5, 7, 193, 16, 8, 2, 27, 10, 21, 18, 16, 194, 2, 27, 193, 9, 193, 16, 193,
		2, 16, 27, 193, 2, 193, 26, 193, 7, 194, 2, 27, 8, 16, 2, 27, 8, 2, 7, 16, 2, 7, 194, 16, 21, 193, 1, 8, 10, 4, 0, 10, 194,
		16, 27, 193, 2, 27, 7, 193, 5, 7, 194, 1, 16, 1, 7, 5, 194, 2, 27, 193, 2, 1, 201, 2, 27, 2, 27, 21, 193, 7, 16, 26, 7, 193,
		21, 193, 5, 7, 193, 5, 26, 7, 194, 10, 4, 194, 0, 20, 4, 0, 8, 21, 7, 194, 16, 2, 193, 0, 7, 27, 193, 1, 7, 2, 7, 193, 1,
		8, 21, 2, 7, 27, 2, 7, 8, 27, 18, 2, 1, 7, 8, 193, 2, 10, 7, 4, 0, 194, 7, 1, 27, 8, 16, 21, 18, 10, 21, 2, 20, 193, 21,
		10, 198, 21, 19, 196, 21, 8, 27, 196, 2, 27, 193, 26, 7, 28, 27
	};

	static constexpr std::array<std::uint_least8_t, 814> rlescindices =
	{
		209, 1, 193, 34, 194, 1, 194, 34, 198, 1, 34, 199, 1, 254, 34, 195, 1, 6, 193, 1, 198, 2, 194, 21, 0, 193, 21, 1, 193, 21,
		1, 214, 21, 193, 12, 203, 21, 202, 14, 2, 211, 14, 0, 202, 4, 0, 204, 27, 193, 3, 1, 194, 3, 1, 198, 3, 1, 194, 3, 1, 193,
		2, 198, 3, 2, 195, 3, 1, 196, 3, 194, 50, 0, 197, 50, 3, 194, 56, 0, 200, 64, 0, 193, 64, 196, 90, 0, 193, 90, 193, 95, 0,
		95, 50, 193, 3, 0, 202, 3, 1, 195, 3, 202, 16, 2, 1, 200, 16, 194, 5, 0, 206, 5, 0, 201, 23, 0, 205, 22, 0, 204, 44, 0, 203,
		54, 195, 55, 0, 206, 55, 196, 29, 0, 201, 29, 196, 37, 0, 207, 37, 0, 199, 48, 0, 196, 57, 1, 198, 57, 0, 204, 33, 201, 58,
		0, 207, 58, 1, 58, 210, 39, 18, 0, 195, 18, 1, 193, 18, 197, 25, 193, 17, 0, 199, 17, 194, 11, 0, 11, 196, 10, 195, 41, 0,
		46, 1, 193, 46, 0, 196, 51, 0, 194, 26, 1, 0, 193, 9, 0, 52, 0, 52, 204, 32, 0, 193, 32, 38, 193, 1, 199, 38, 0, 197, 38,
		193, 35, 0, 197, 35, 53, 197, 40, 32, 195, 8, 0, 8, 200, 91, 196, 2, 198, 62, 0, 197, 62, 199, 76, 196, 93, 0, 93, 196, 70,
		0, 194, 70, 196, 73, 199, 14, 0, 18, 76, 0, 2, 195, 1, 2, 193, 1, 21, 14, 34, 21, 34, 14, 197, 34, 21, 198, 2, 197, 34, 212,
		21, 193, 1, 193, 2, 219, 1, 0, 193, 1, 34, 195, 1, 193, 34, 204, 1, 198, 2, 195, 1, 21, 1, 193, 34, 1, 34, 203, 1, 34, 193,
		1, 195, 34, 217, 1, 0, 214, 1, 7, 195, 1, 195, 19, 204, 34, 200, 12, 0, 193, 12, 193, 18, 193, 59, 0, 194, 59, 14, 220, 1,
		24, 196, 1, 24, 1, 24, 1, 25, 1, 193, 24, 193, 1, 0, 193, 28, 2, 1, 28, 1, 30, 193, 1, 193, 30, 0, 195, 6, 193, 1, 194, 6,
		193, 25, 1, 25, 30, 1, 202, 24, 195, 61, 195, 86, 196, 77, 0, 198, 14, 197, 79, 0, 195, 1, 34, 1, 230, 34, 197, 49, 194,
		65, 0, 195, 75, 0, 193, 75, 198, 16, 195, 69, 1, 69, 195, 74, 0, 74, 199, 84, 0, 1, 84, 195, 39, 0, 194, 68, 0, 194, 68,
		195, 39, 199, 92, 197, 87, 17, 34, 1, 193, 34, 21, 194, 34, 1, 11, 198, 87, 25, 193, 0, 196, 24, 34, 4, 195, 27, 193, 3,
		193, 1, 3, 0, 3, 2, 195, 1, 14, 209, 1, 34, 1, 34, 194, 1, 30, 1, 0, 194, 1, 0, 36, 1, 197, 21, 1, 71, 0, 67, 0, 2, 1, 195,
		42, 193, 20, 0, 193, 118, 60, 0, 60, 194, 43, 195, 15, 47, 45, 0, 45, 136, 0, 136, 106, 0, 193, 104, 161, 0, 161, 110, 193,
		34, 13, 194, 81, 194, 120, 116, 0, 116, 128, 0, 128, 194, 66, 0, 66, 72, 0, 72, 98, 193, 97, 193, 31, 0, 199, 31, 194, 88,
		193, 117, 194, 112, 0, 194, 112, 78, 0, 193, 78, 193, 83, 193, 82, 194, 121, 89, 194, 130, 195, 146, 3, 156, 0, 193, 156,
		3, 193, 148, 195, 147, 0, 194, 158, 193, 153, 0, 149, 0, 197, 94, 0, 197, 94, 200, 85, 0, 85, 193, 101, 196, 96, 0, 197,
		96, 194, 111, 0, 208, 100, 48, 108, 0, 201, 108, 129, 0, 129, 196, 109, 0, 109, 194, 107, 0, 107, 2, 196, 107, 201, 135,
		0, 194, 135, 198, 124, 0, 124, 195, 123, 0, 200, 123, 197, 114, 0, 114, 38, 198, 102, 0, 102, 193, 126, 0, 199, 126, 197,
		142, 0, 196, 125, 201, 154, 150, 0, 195, 150, 198, 141, 201, 140, 0, 10, 122, 16, 0, 133, 0, 199, 133, 194, 134, 0, 193,
		134, 196, 138, 196, 143, 195, 144, 0, 194, 162, 0, 196, 162, 86, 0, 195, 54, 194, 63, 0, 196, 63, 193, 157, 0, 197, 80, 127,
		79, 115, 0, 193, 115, 159, 0, 159, 194, 103, 201, 119, 197, 145, 0, 193, 99, 0, 196, 99, 137, 139, 193, 24, 155, 24, 194,
		137, 0, 137, 155, 193, 30, 194, 28, 30, 193, 28, 193, 30, 139, 0, 105, 0, 195, 105, 1, 2, 195, 1, 2, 194, 1, 21, 202, 1,
		196, 131, 194, 34, 19, 0, 194, 14, 197, 151, 193, 160, 0, 194, 152, 0, 152, 195, 163, 17, 194, 113, 197, 132, 0, 193, 132,
		195, 1, 193, 3, 199, 1, 28, 199, 1, 0, 196, 24, 0, 193, 1, 2, 193, 0
	};

	static constexpr std::array<std::uint_least8_t, 642> rlewfields =
	{
		16, 194, 0, 213, 32, 194, 0, 254, 32, 198, 16, 248, 32, 195, 16, 222, 32, 195, 16, 194, 32, 193, 16, 204, 32, 193, 16, 199,
		32, 197, 16, 194, 32, 16, 194, 32, 16, 193, 32, 16, 200, 32, 16, 32, 193, 16, 193, 32, 16, 195, 32, 16, 198, 32, 16, 193,
		32, 193, 16, 32, 16, 195, 32, 16, 198, 32, 16, 197, 32, 194, 16, 32, 197, 16, 195, 32, 16, 32, 193, 16, 32, 16, 202, 32,
		16, 195, 32, 16, 193, 32, 16, 199, 32, 16, 32, 193, 16, 193, 32, 16, 32, 193, 16, 194, 32, 16, 195, 32, 194, 16, 195, 32,
		193, 16, 32, 16, 195, 32, 16, 32, 194, 16, 195, 32, 16, 195, 32, 16, 197, 32, 16, 32, 16, 195, 32, 16, 32, 194, 16, 194,
		32, 16, 196, 32, 16, 195, 32, 255, 3, 16, 32, 16, 194, 32, 193, 16, 197, 32, 16, 193, 32, 194, 16, 200, 32, 16, 193, 32,
		16, 32, 16, 195, 32, 16, 32, 193, 16, 194, 32, 193, 16, 197, 32, 16, 32, 193, 16, 193, 32, 194, 16, 197, 32, 16, 199, 32,
		194, 16, 32, 193, 16, 32, 193, 16, 32, 16, 200, 32, 196, 16, 195, 32, 16, 194, 32, 16, 204, 32, 194, 16, 194, 32, 193, 16,
		219, 32, 193, 16, 194, 32, 16, 195, 32, 16, 194, 32, 16, 193, 32, 16, 32, 194, 16, 196, 32, 16, 201, 32, 16, 32, 16, 196,
		32, 193, 16, 195, 32, 16, 32, 16, 203, 32, 16, 32, 16, 195, 32, 194, 16, 195, 32, 197, 16, 193, 32, 16, 201, 32, 16, 194,
		32, 193, 16, 194, 32, 16, 32, 16, 196, 32, 194, 16, 212, 32, 16, 195, 32, 16, 206, 32, 198, 16, 219, 32, 195, 16, 197, 32,
		194, 16, 206, 32, 193, 16, 215, 32, 198, 16, 254, 32, 16, 203, 32, 193, 16, 239, 32, 16, 241, 32, 16, 32, 16, 193, 32, 16,
		193, 32, 16, 241, 32, 193, 16, 193, 32, 16, 197, 32, 193, 16, 194, 32, 16, 196, 32, 16, 193, 32, 193, 16, 194, 32, 16, 195,
		32, 16, 193, 32, 16, 199, 32, 16, 195, 32, 16, 201, 32, 16, 32, 16, 197, 32, 16, 193, 32, 16, 204, 32, 16, 193, 32, 16, 203,
		32, 16, 200, 32, 16, 195, 32, 16, 235, 32, 16, 200, 32, 16, 243, 32, 16, 32, 16, 32, 193, 16, 202, 32, 16, 212, 32, 16, 195,
		32, 16, 32, 16, 194, 32, 16, 195, 32, 16, 198, 32, 16, 32, 16, 196, 32, 16, 32, 194, 16, 193, 32, 193, 16, 194, 32, 16, 195,
		32, 16, 32, 16, 32, 16, 199, 32, 16, 193, 32, 16, 196, 32, 194, 16, 193, 32, 16, 200, 32, 16, 32, 16, 194, 32, 16, 32, 16,
		195, 32, 16, 32, 193, 16, 193, 32, 193, 16, 194, 32, 193, 16, 197, 32, 194, 16, 197, 32, 16, 196, 32, 194, 16, 197, 32, 16,
		32, 193, 16, 197, 32, 16, 193, 32, 193, 16, 197, 32, 16, 193, 32, 16, 198, 32, 16, 32, 16, 198, 32, 194, 16, 201, 32, 16,
		32, 193, 16, 197, 32, 193, 16, 193, 32, 194, 16, 195, 32, 16, 193, 32, 193, 16, 203, 32, 193, 16, 200, 32, 16, 193, 32, 194,
		16, 194, 32, 193, 16, 193, 32, 16, 194, 32, 16, 195, 32, 16, 216, 32, 193, 16, 201, 32, 16, 193, 32, 16, 209, 32, 16, 193,
		32, 16, 196, 32, 16, 213, 32, 193, 16, 193, 32, 16, 195, 32, 16, 194, 32, 16, 203, 32, 16, 197, 32, 16, 194, 32, 16, 32,
		16, 196, 32, 16, 193, 32, 16, 196, 32, 16, 195, 32, 16, 193, 32, 194, 16, 227, 32, 16, 32, 0
	};

	static constexpr std::array<std::uint_least8_t, 285> rlecfindices =
	{
		209, 0, 193, 1, 209, 0, 3, 194, 0, 1, 194, 0, 7, 197, 0, 9, 10, 0, 13, 14, 15, 16, 17, 18, 19, 0, 21, 22, 0, 24, 0, 26, 27,
		28, 29, 193, 0, 31, 7, 193, 0, 34, 35, 7, 0, 36, 193, 0, 37, 7, 0, 38, 39, 193, 0, 41, 42, 43, 7, 233, 0, 74, 196, 0, 7, 197,
		0, 74, 76, 0, 77, 78, 79, 0, 1, 194, 0, 7, 193, 0, 85, 86, 88, 193, 0, 90, 92, 255, 3, 0, 7, 0, 93, 96, 193, 0, 100, 83, 0,
		7, 0, 102, 0, 36, 193, 103, 1, 195, 0, 7, 197, 0, 7, 0, 7, 0, 104, 255, 6, 0, 7, 193, 0, 105, 254, 0, 231, 0, 255, 4, 254,
		0, 106, 0, 106, 218, 0, 94, 254, 0, 254, 0, 109, 111, 113, 115, 117, 119, 121, 123, 0, 125, 222, 0, 129, 0, 131, 7, 193, 0,
		94, 198, 0, 94, 138, 139, 140, 95, 142, 143, 144, 145, 102, 146, 147, 254, 0, 148, 0, 149, 150, 0, 151, 206, 0, 153, 221, 0,
		155, 218, 0, 193, 105, 193, 0, 157, 158, 159, 193, 0, 162, 163, 164, 165, 194, 0, 166, 7, 194, 0, 7, 193, 0, 7, 254, 0, 254,
		0, 168, 0, 169, 193, 0, 7, 0, 7, 194, 0, 7, 0, 170, 171, 172, 173, 170, 0, 174, 175, 176, 177, 255, 4, 7, 0, 96, 178, 179,
		7, 254, 0, 181, 206, 0, 7, 227, 0, 1, 233, 0, 193, 182, 197, 0, 182, 197, 0, 184, 254, 0, 78, 255, 3, 254, 0, 1, 254, 0, 254,
		0, 1, 254, 0, 186, 234, 0
	};

	static constexpr std::array<std::uint_least8_t, 257> rleclindices =
	{
		209, 0, 193, 1, 213, 0, 1, 194, 0, 7, 197, 0, 9, 193, 0, 13, 14, 15, 16, 17, 18, 19, 0, 21, 22, 0, 24, 0, 26, 27, 28, 29, 193,
		0, 31, 7, 193, 0, 34, 35, 7, 0, 36, 193, 0, 37, 7, 0, 38, 39, 193, 0, 41, 42, 43, 7, 239, 0, 7, 197, 0, 74, 76, 0, 77, 78,
		79, 0, 1, 197, 0, 85, 198, 0, 7, 0, 7, 0, 7, 196, 0, 100, 193, 0, 7, 0, 102, 0, 36, 193, 103, 1, 195, 0, 7, 197, 0, 7, 0, 7,
		0, 104, 255, 6, 0, 7, 193, 0, 105, 254, 0, 231, 0, 255, 4, 254, 0, 106, 0, 106, 214, 0, 108, 193, 85, 254, 0, 254, 0, 125,
		224, 0, 131, 7, 193, 0, 94, 198, 0, 94, 138, 139, 0, 95, 0, 143, 0, 145, 102, 146, 147, 254, 0, 148, 0, 149, 150, 0, 151, 206,
		0, 153, 221, 0, 155, 218, 0, 193, 105, 193, 0, 157, 158, 159, 193, 0, 162, 163, 164, 165, 194, 0, 166, 7, 194, 0, 7, 193, 0,
		7, 254, 0, 254, 0, 168, 0, 169, 193, 0, 7, 0, 7, 194, 0, 7, 0, 170, 171, 172, 173, 170, 0, 174, 175, 176, 177, 255, 4, 7, 0,
		96, 178, 179, 7, 254, 0, 254, 0, 1, 233, 0, 193, 182, 197, 0, 182, 197, 0, 184, 254, 0, 78, 255, 3, 254, 0, 1, 254, 0, 254,
		0, 1, 254, 0, 186, 234, 0
	};

	static constexpr std::array<std::uint_least8_t, 283> rlecuindices =
	{
		214, 0, 194, 2, 203, 0, 4, 195, 0, 5, 2, 6, 0, 193, 8, 196, 0, 11, 12, 198, 0, 20, 193, 0, 23, 0, 25, 196, 0, 30, 0, 8, 32,
		33, 194, 0, 8, 196, 0, 8, 193, 0, 40, 8, 195, 0, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
		62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 202, 0, 75, 197, 0, 8, 194, 0, 25, 200, 0, 80, 81, 2, 82, 83, 84, 0, 87, 89,
		193, 0, 91, 93, 94, 255, 3, 0, 8, 95, 97, 98, 99, 0, 101, 193, 0, 8, 197, 0, 2, 194, 97, 0, 8, 197, 0, 8, 0, 8, 0, 90, 255,
		6, 0, 8, 197, 0, 96, 254, 0, 229, 0, 255, 4, 254, 0, 194, 107, 193, 0, 107, 212, 0, 94, 254, 0, 254, 0, 110, 112, 114, 116,
		118, 120, 122, 124, 209, 0, 126, 127, 128, 203, 0, 130, 194, 0, 8, 85, 0, 132, 133, 134, 135, 136, 137, 0, 94, 0, 139, 141,
		0, 142, 0, 144, 254, 0, 152, 194, 0, 154, 221, 0, 156, 219, 0, 193, 96, 194, 0, 160, 161, 200, 0, 8, 194, 0, 8, 193, 0, 8,
		194, 0, 193, 167, 254, 0, 254, 0, 8, 0, 8, 105, 193, 0, 8, 202, 0, 255, 3, 8, 0, 8, 195, 0, 8, 254, 0, 180, 199, 0, 181, 206,
		0, 7, 229, 0, 2, 233, 0, 193, 183, 197, 0, 183, 197, 0, 185, 254, 0, 83, 255, 3, 254, 0, 2, 254, 0, 254, 0, 2, 254, 0, 187,
		233, 0
	};

	static constexpr std::array<std::uint_least64_t, 169> pflags =
	{
		UINT64_C(7), UINT64_C(68719476759), UINT64_C(68719476767), UINT64_C(2251868533162007), UINT64_C(2251954432508423), UINT64_C(2251937252638983),
		UINT64_C(2251937252638727), UINT64_C(2260733345661191), UINT64_C(11259136507379719), UINT64_C(2251937252639239), UINT64_C(2251937252638855),
		UINT64_C(2260750525530631), UINT64_C(182395784908511239), UINT64_C(2260733345661447), UINT64_C(273477129130219527), UINT64_C(273477129130213383),
		UINT64_C(11267932600435719), UINT64_C(182395784908505095), UINT64_C(2260733345693703), UINT64_C(273423253060458503), UINT64_C(273423253060452359),
		UINT64_C(273423253328887815), UINT64_C(5), UINT64_C(68719476765), UINT64_C(2251799813685269), UINT64_C(2251937252638725),
		UINT64_C(2260595906740229), UINT64_C(273036224967606277), UINT64_C(2251937252638981), UINT64_C(11259136507379717), UINT64_C(1134695999864837),
		UINT64_C(2251804108652549), UINT64_C(273563990548807685), UINT64_C(182404583149109253), UINT64_C(2251799813685253), UINT64_C(273477129130213381),
		UINT64_C(273423253060452357), UINT64_C(273423253328887813), UINT64_C(273036224967475205), UINT64_C(273563990683025413), UINT64_C(273030727409336325),
		UINT64_C(273547497874391045), UINT64_C(273510114479046661), UINT64_C(273045021060661253), UINT64_C(273045021329096709), UINT64_C(273039523502391301),
		UINT64_C(273039523502456837), UINT64_C(2490499390028939269), UINT64_C(2491595603121971205), UINT64_C(185782280789164037),
		UINT64_C(2490499390028906501), UINT64_C(1), UINT64_C(56872238946877445), UINT64_C(2251799813685765), UINT64_C(182404583149011461),
		UINT64_C(282571189803549701), UINT64_C(282044523733844997), UINT64_C(273037324479102981), UINT64_C(282484328384955397), UINT64_C(11258999068426245),
		UINT64_C(4512395720392709), UINT64_C(2260595906707461), UINT64_C(2251816993554949), UINT64_C(2251799813685381), UINT64_C(2491062339982368773),
		UINT64_C(2491062339982336005), UINT64_C(9070970929157), UINT64_C(1134695999864869), UINT64_C(273039523502424069), UINT64_C(182395784908505093),
		UINT64_C(273030727543554053), UINT64_C(185219330768674821), UINT64_C(273039523502358533), UINT64_C(185219330768642053), UINT64_C(182958734861934597),
		UINT64_C(1425952232016183301), UINT64_C(1049347509270380549), UINT64_C(185210534676668421), UINT64_C(472886756966957061),
		UINT64_C(184656380815245317), UINT64_C(184656380815310853), UINT64_C(2778729766180651013), UINT64_C(200973133371408389),
		UINT64_C(2779292716134047749), UINT64_C(273030727946207237), UINT64_C(184656380815212549), UINT64_C(182395784908537861),
		UINT64_C(185219330902859781), UINT64_C(182958734861967365), UINT64_C(273352884316274693), UINT64_C(273045021060628485), UINT64_C(274156627383287813),
		UINT64_C(182395787055988741), UINT64_C(273336391641858053), UINT64_C(470626161060249605), UINT64_C(470626161060216837), UINT64_C(2251799813750789),
		UINT64_C(185782315081793541), UINT64_C(275291324389793797), UINT64_C(2778729766180618245), UINT64_C(4512395720425477), UINT64_C(185219330768740357),
		UINT64_C(2251799813718021), UINT64_C(273036225235910661), UINT64_C(273045021329063941), UINT64_C(185782282870587461), UINT64_C(2487121692455862341),
		UINT64_C(1134764719341605), UINT64_C(2251937252638853), UINT64_C(11259136507380741), UINT64_C(2260733345661189), UINT64_C(2260733345660933),
		UINT64_C(2251954432508421), UINT64_C(191402984163247109), UINT64_C(10141895254606853), UINT64_C(1125899973951489), UINT64_C(1134696134082565),
		UINT64_C(11259003363393541), UINT64_C(11259003363393669), UINT64_C(11259003363394565), UINT64_C(2499506589283648517), UINT64_C(282043424222217221),
		UINT64_C(281474977784397829), UINT64_C(11258999068427269), UINT64_C(272467778529656837), UINT64_C(282037926664078341), UINT64_C(282043424490652677),
		UINT64_C(273477129130475525), UINT64_C(273423253060583429), UINT64_C(11259149392281605), UINT64_C(11259136507379845), UINT64_C(2251937386856453),
		UINT64_C(137438953473), UINT64_C(3261151488253957), UINT64_C(3207275418361861), UINT64_C(2823683299115013), UINT64_C(2251937252639237),
		UINT64_C(2251799830462469), UINT64_C(2251799815782405), UINT64_C(2251799817879557), UINT64_C(2251799822073861), UINT64_C(273030727409352709),
		UINT64_C(2490490593936965637), UINT64_C(56303792508928005), UINT64_C(273030727442907141), UINT64_C(472886756966924293), UINT64_C(273030727409369093),
		UINT64_C(56857945295552517), UINT64_C(524289), UINT64_C(2251799813685509), UINT64_C(2260613086577157), UINT64_C(2260595906707973),
		UINT64_C(11258999068427397), UINT64_C(2260595906707717), UINT64_C(182395784908507141), UINT64_C(273477129130215429), UINT64_C(11267795161482245),
		UINT64_C(273423253060454405), UINT64_C(203233729279197189), UINT64_C(8796093022213), UINT64_C(273030727409401861), UINT64_C(184656380815278085),
		UINT64_C(184656380815228933), UINT64_C(2490490593936932869), UINT64_C(11259011953328133), UINT64_C(2490499390029004805),
		UINT64_C(2821346837143557), UINT64_C(2252349569499141), UINT64_C(5638295628283909)
	};

	static constexpr std::array<std::uint_least16_t, 16> cflags =
	{
		512, 896, 640, 2432, 3080, 3072, 7280, 7269, 7237, 7176, 7267, 7235, 7233, 7168, 0, 128
	};

	std::array<std::uint_least8_t, 1902> flyweights;
	auto table = std::make_unique<raw_record_table>();
	auto& records = table->records;

	run_length_decode(std::cbegin(rlestage1), std::cend(rlestage1), std::begin(table->stage1));
	run_length_decode(std::cbegin(rlestage2), std::cend(rlestage2), std::begin(table->stage2));

	run_length_decode(std::cbegin(rlepflagindices), std::cend(rlepflagindices), std::begin(flyweights));
	for (std::size_t r = 0, e = records.size(); r < e; ++r)
		records[r].pflags = pflags[flyweights[r]];

	run_length_decode(std::cbegin(rlecflagindices), std::cend(rlecflagindices), std::begin(flyweights));
	for (std::size_t r = 0, e = records.size(); r < e; ++r)
		records[r].cflags = cflags[flyweights[r]];

	run_length_decode(std::cbegin(rleabfields), std::cend(rleabfields),
		make_member_accessor<decltype(&raw_record::abfields), &raw_record::abfields>(std::begin(records)));
	run_length_decode(std::cbegin(rlegcindices), std::cend(rlegcindices),
		make_member_accessor<decltype(&raw_record::gcindex), &raw_record::gcindex>(std::begin(records)));
	run_length_decode(std::cbegin(rlescindices), std::cend(rlescindices),
		make_member_accessor<decltype(&raw_record::scindex), &raw_record::scindex>(std::begin(records)));
	run_length_decode(std::cbegin(rlewfields), std::cend(rlewfields),
		make_member_accessor<decltype(&raw_record::wfields), &raw_record::wfields>(std::begin(records)));
	run_length_decode(std::cbegin(rlecfindices), std::cend(rlecfindices),
		make_member_accessor<decltype(&raw_record::cfindex), &raw_record::cfindex>(std::begin(records)));
	run_length_decode(std::cbegin(rleclindices), std::cend(rleclindices),
		make_member_accessor<decltype(&raw_record::clindex), &raw_record::clindex>(std::begin(records)));
	run_length_decode(std::cbegin(rlecuindices), std::cend(rlecuindices),
		make_member_accessor<decltype(&raw_record::cuindex), &raw_record::cuindex>(std::begin(records)));

	return table;
}

} // namespace lug::unicode

#endif
